import{_ as o,c as i,a as l,b as a,d as s,e as p,f as t,r as c,o as u}from"./app-DXiP8jJS.js";const r="/cjp-cli-dev-docs/assets/example-page-31tYsSzh.png",d={},k={class:"hint-container tip"},m={class:"hint-container tip"},v={class:"hint-container tip"},b={class:"hint-container tip"},g={class:"hint-container tip"},h={class:"hint-container tip"};function y(j,n){const e=c("RouteLink");return u(),i("div",null,[n[120]||(n[120]=l('<h1 id="模板" tabindex="-1"><a class="header-anchor" href="#模板"><span>模板</span></a></h1><p>模板也是脚手架的核心环节，你可以按照自己的需求开发模板来实现快速复用。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>演示模板参考代码 <a href="https://gitee.com/Mr_Mikey/cjp-cli-dev-template" target="_blank" rel="noopener noreferrer">演示模板仓库地址</a></p></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>推荐你也先创建一个 Git 仓库，然后将模板提交到仓库中统一管理。</p></div><h2 id="概念解释" tabindex="-1"><a class="header-anchor" href="#概念解释"><span>概念解释</span></a></h2><ul><li><strong>标准模板</strong>：仅依赖脚手架命令提供的变量参数自动进行 <code>ejs</code> 渲染，不额外依赖其它参数和操作。</li><li><strong>自定义模板</strong>：提供自定义脚本让脚手架命令运行，可自行决定渲染方式和 <code>ejs变量</code> 属性等。</li></ul><h2 id="如何创建项目模板" tabindex="-1"><a class="header-anchor" href="#如何创建项目模板"><span>如何创建项目模板</span></a></h2><p>项目模板分为 <code>标准模板</code> 和 <code>自定义模板</code> ，在 <a href="#%E6%A6%82%E5%BF%B5%E8%A7%A3%E9%87%8A">概念解释</a> 中强调了定义，注意，<code>自定义模板</code> 和<code>标准模板</code> 的区别是 <code>自定义模板</code> 需要额外提供一个 <code>index.js</code> 作为入口文件来自定义渲染模板内容，这在脚手架命令源码中是规定好的。</p>',8)),a("div",k,[n[5]||(n[5]=a("p",{class:"hint-container-title"},"提示",-1)),a("p",null,[n[1]||(n[1]=s("项目模板提供给脚手架 ")),n[2]||(n[2]=a("code",null,"init",-1)),n[3]||(n[3]=s(" 命令进行使用，查看 ")),p(e,{to:"/guide/core-command.html#%E5%88%9D%E5%A7%8B%E5%8C%96-init%E5%91%BD%E4%BB%A4"},{default:t(()=>n[0]||(n[0]=[s("init命令")])),_:1}),n[4]||(n[4]=s(" 使用。"))])]),n[121]||(n[121]=l(`<h3 id="创建标准项目模板" tabindex="-1"><a class="header-anchor" href="#创建标准项目模板"><span>创建标准项目模板</span></a></h3><p>1、创建模板目录如 <code>cjp-cli-dev-template-vue3</code> ，并执行npm初始化。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>文件夹名就是你的npm包名，按你自己喜欢的来命名，写什么都行，只要npm上没这个包就可以，否则发不上去。</p></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">cd</span> cjp-cli-dev-template-vue3</span>
<span class="line"><span class="token function">npm</span> init <span class="token parameter variable">-y</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>2、在 <code>cjp-cli-dev-template-vue3</code> 目录中创建 <code>template</code> 文件夹，找个你认为优秀的项目作为模板，这里我用 <code>vue-cli</code> 下载的 <code>vue3-vite</code> 项目作为演示，把模板内的所有文件都复制到 <code>template</code> 文件夹中。</p><p>此时你的目录结构应该长这样，其中 <code>template</code> 文件夹中的文件内容则作为脚手架命令最终下载的项目源文件。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">cjp-cli-dev-template-vue3     # 模板包名</span>
<span class="line">├─ template                   # 模板拷贝目录</span>
<span class="line">│  ├─ src                     # 项目源码</span>
<span class="line">│  ├─ package.json            # 项目package.json</span>
<span class="line">│  └─ ...                     # 项目其他文件</span>
<span class="line">└─ package.json               # 模板package.json</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、用过 <code>vue-cli</code> 下载模板你应该清楚，你输入的项目名称和版本号最终会写入到下载好的模板 <code>package.json</code> 中，它的实现方式就是通过 <code>ejs</code> 来解析和渲染最终的模板。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>ejs变量</code> 的语法为 <code>&lt;%= 变量名 %&gt;</code> 。</p><p>对 <code>ejs</code> 有疑问？查看官方文档 <a href="https://www.npmjs.com/package/ejs" target="_blank" rel="noopener noreferrer">ejs</a> 。</p></div><p>这一点脚手架 <code>init</code> 命令的实现方式和 <code>vue-cli</code> 是一致的，所以我们也需要修改项目 <code>package.json</code> ，将对应的位置替换成 <code>ejs变量</code> 。</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&lt;%= projectName %&gt;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&lt;%= projectVersion %&gt;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string">&quot;...省略其他&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，你提供的项目模板代码中其它位置如果有需要也可以通过修改为 <code>ejs变量</code> 的形式来进行替换，最终 <code>init</code> 命令执行时会扫描所有文件，并将用到ejs变量的地方替换成真实内容。</p><p><code>init</code> 命令安装 <code>标准项目模板</code> 时传递给 <code>ejs</code> 的变量有以下几个，你可以按需使用。</p><table><thead><tr><th>参数名</th><th>参数说明</th></tr></thead><tbody><tr><td>type</td><td>安装类型是项目还是组件库，项目返回project，组件库返回component</td></tr><tr><td>projectName</td><td>执行安装命令时你输入的项目名称</td></tr><tr><td>projectVersion</td><td>执行安装命令时你输入的项目版本</td></tr><tr><td>projectTemplate</td><td>执行安装命令时你选择安装的项目npm包名</td></tr></tbody></table>`,14)),a("p",null,[n[8]||(n[8]=s("4、模板创建好后，你需要将模板发布到npm上，并配置 ")),p(e,{to:"/guide/configuration.html#%E9%A1%B9%E7%9B%AE-%E7%BB%84%E4%BB%B6%E5%BA%93%E6%A8%A1%E6%9D%BF%E9%85%8D%E7%BD%AE"},{default:t(()=>n[6]||(n[6]=[s("本地JSON")])),_:1}),n[9]||(n[9]=s(" 或者 ")),p(e,{to:"/guide/configuration.html#mongodb%E9%85%8D%E7%BD%AE%E6%A8%A1%E6%9D%BF"},{default:t(()=>n[7]||(n[7]=[s("MongoDB")])),_:1}),n[10]||(n[10]=s(" 后即可执行 ")),n[11]||(n[11]=a("code",null,"init",-1)),n[12]||(n[12]=s(" 命令安装使用。"))]),n[122]||(n[122]=l(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>发布npm前，请先访问 <a href="https://www.npmjs.com/" target="_blank" rel="noopener noreferrer">npm官网</a>，确保网络连接正常，然后执行 <code>npm login</code> 进行登录，否则会发布失败。</p><p>发布新的版本前，请先提交代码，并更新版本号。</p></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 进入目录</span></span>
<span class="line"><span class="token builtin class-name">cd</span> cjp-cli-dev-template-vue3</span>
<span class="line"><span class="token comment"># 发布npm包</span></span>
<span class="line"><span class="token function">npm</span> publish</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建自定义项目模板" tabindex="-1"><a class="header-anchor" href="#创建自定义项目模板"><span>创建自定义项目模板</span></a></h3><p>在 <a href="#%E6%A6%82%E5%BF%B5%E8%A7%A3%E9%87%8A">概念解释</a> 中提到过 <code>自定义模板</code> 和<code>标准模板</code> 的区别是 <code>自定义模板</code> 需要额外提供一个 <code>index.js</code> 作为入口文件来自定义渲染模板内容，这在脚手架命令源码中是规定好的。</p><p>1、与创建 <code>标准项目模板</code> 一样，创建 <code>自定义项目模板</code> 目录如 <code>cjp-cli-dev-template-vue3-custom</code> ，并执行npm初始化。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>文件夹名就是你的npm包名，按你自己喜欢的来命名，写什么都行，只要npm上没这个包就可以，否则发不上去。</p></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">cd</span> cjp-cli-dev-template-vue3-custom</span>
<span class="line"><span class="token function">npm</span> init <span class="token parameter variable">-y</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>2、在 <code>cjp-cli-dev-template-vue3-custom</code> 目录中创建 <code>template</code> 文件夹，找个你认为优秀的项目作为模板，这里我用 <code>vue-cli</code> 下载的 <code>vue3-vite</code> 项目作为演示，把模板内的所有文件都复制到 <code>template</code> 文件夹中。</p><p>与创建 <code>标准项目模板</code> 不同的是，你还需要在 <code>cjp-cli-dev-template-vue3-custom</code> 目录中创建 <code>index.js</code> 文件，它将作为自定义渲染的入口文件。</p><p>此时你的目录结构应该长这样，其中 <code>template</code> 文件夹中的文件内容则作为脚手架命令最终下载的项目源文件。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">cjp-cli-dev-template-vue3-custom     # 模板包名</span>
<span class="line">├─ template                          # 模板拷贝目录</span>
<span class="line">│  ├─ src                            # 项目源码</span>
<span class="line">│  ├─ package.json                   # 项目package.json</span>
<span class="line">│  └─ ...                            # 项目其他文件</span>
<span class="line">├─ index.js                          # 模板自定义渲染入口文件</span>
<span class="line">└─ package.json                      # 模板package.json</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、你需要编写自定义渲染逻辑，约定为在 <code>index.js</code> 中使用 <code>commonjs</code> 规范导出 <code>install</code> 方法，最终执行 <code>init</code> 命令在你选择安装 <code>自定义项目模板</code> 时，将会读取这个 <code>index.js</code> 文件，并执行 <code>install</code> 方法进行安装。</p><p><code>install</code> 方法接收 <code>options</code> 参数，<code>init</code> 命令安装 <code>自定义项目模板</code> 时会将以下参数传递给<code>install</code> 方法，你可以按需使用。</p>`,13)),a("table",null,[n[19]||(n[19]=a("thead",null,[a("tr",null,[a("th",null,"参数名"),a("th",null,"参数说明")])],-1)),a("tbody",null,[a("tr",null,[n[15]||(n[15]=a("td",null,"templateInfo",-1)),a("td",null,[n[14]||(n[14]=s("模板配置信息对象，查看 ")),p(e,{to:"/guide/configuration.html#%E9%A1%B9%E7%9B%AE-%E7%BB%84%E4%BB%B6%E5%BA%93%E6%A8%A1%E6%9D%BF%E9%85%8D%E7%BD%AE"},{default:t(()=>n[13]||(n[13]=[s("模板字段说明")])),_:1})])]),n[16]||(n[16]=a("tr",null,[a("td",null,"projectInfo"),a("td",null,[s("项目信息对象，包含 "),a("a",{href:"#%E5%88%9B%E5%BB%BA%E6%A0%87%E5%87%86%E9%A1%B9%E7%9B%AE%E6%A8%A1%E6%9D%BF"},"标准项目模板"),s(" 接收的全部属性")])],-1)),n[17]||(n[17]=a("tr",null,[a("td",null,"sourcePath"),a("td",null,"模板源路径")],-1)),n[18]||(n[18]=a("tr",null,[a("td",null,"targetPath"),a("td",null,"安装目标路径")],-1))])]),n[123]||(n[123]=l(`<p>举个例子，假设我想在安装 <code>自定义项目模板</code> 时，增加输入项目描述的选项，请参考以下代码实现，你可以尝试加入更多渲染逻辑，最终需要 <code>commonjs</code> 规范导出的 <code>install</code> 方法即可。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span></span>
<span class="line">  prompt<span class="token punctuation">,</span> <span class="token comment">// 终端询问交互</span></span>
<span class="line">  fse<span class="token punctuation">,</span> <span class="token comment">// 文件操作</span></span>
<span class="line">  ejs<span class="token punctuation">,</span> <span class="token comment">// ejs渲染</span></span>
<span class="line">  glob<span class="token punctuation">,</span> <span class="token comment">// 文件匹配</span></span>
<span class="line">  spawnAsync<span class="token punctuation">,</span> <span class="token comment">// 执行进程</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;@cjp-cli-dev/utils&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 工具方法 - 你需要先安装@cjp-cli-dev/utils，也可以自己去npm找对应包安装</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 白名单命令，不在此白名单中的命令都需要确认是否执行，防止用户插入风险操作，如：rm -rf等</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token constant">COMMAND_WHITELIST</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">  <span class="token string">&quot;npm&quot;</span><span class="token punctuation">,</span> <span class="token comment">// Node.js的包管理工具</span></span>
<span class="line">  <span class="token string">&quot;cnpm&quot;</span><span class="token punctuation">,</span> <span class="token comment">// npm的中国镜像加速版</span></span>
<span class="line">  <span class="token string">&quot;yarn&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 另一个流行的JavaScript包管理工具</span></span>
<span class="line">  <span class="token string">&quot;pnpm&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 性能更优的npm替代品</span></span>
<span class="line">  <span class="token string">&quot;node&quot;</span><span class="token punctuation">,</span> <span class="token comment">// Node.js运行环境</span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 代码来源于 cjp-cli-dev/commands/init/lib/index.js 下载和渲染逻辑</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">install</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> projectPrompts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 假设自定义项目模板需要额外增加描述信息填写</span></span>
<span class="line">  <span class="token keyword">const</span> descriptionPrompt <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;input&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;description&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;请输入项目描述：&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">validate</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> done <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">done</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">请输入项目描述信息</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">done</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  projectPrompts<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>descriptionPrompt<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 获取用户输入结果</span></span>
<span class="line">  <span class="token keyword">const</span> projectInfoInput <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">prompt</span><span class="token punctuation">(</span>projectPrompts<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> sourcePath<span class="token punctuation">,</span> targetPath<span class="token punctuation">,</span> projectInfo<span class="token punctuation">,</span> templateInfo <span class="token punctuation">}</span> <span class="token operator">=</span> options<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 存入projectInfo中，提供给ejs使用</span></span>
<span class="line">  projectInfo<span class="token punctuation">.</span>description <span class="token operator">=</span> projectInfoInput<span class="token punctuation">.</span>description<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 确保这两个目录都存在，如果不存在会自动创建</span></span>
<span class="line">    fse<span class="token punctuation">.</span><span class="token function">ensureDirSync</span><span class="token punctuation">(</span>sourcePath<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    fse<span class="token punctuation">.</span><span class="token function">ensureDirSync</span><span class="token punctuation">(</span>targetPath<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 拷贝模板代码到当前目录</span></span>
<span class="line">    fse<span class="token punctuation">.</span><span class="token function">copySync</span><span class="token punctuation">(</span>sourcePath<span class="token punctuation">,</span> targetPath<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// ejs忽略文件夹，默认node_modules，可在数据库中配置ignore属性（数组）</span></span>
<span class="line">    <span class="token keyword">const</span> templateIgnore <span class="token operator">=</span> templateInfo<span class="token punctuation">.</span>ignore <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> ignore <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;**/node_modules/**&quot;</span><span class="token punctuation">,</span> <span class="token operator">...</span>templateIgnore<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 模板安装完成后进行ejs渲染，替换掉ejs变量</span></span>
<span class="line">    <span class="token keyword">await</span> <span class="token function">ejsRender</span><span class="token punctuation">(</span><span class="token punctuation">{</span> ignore<span class="token punctuation">,</span> targetPath<span class="token punctuation">,</span> projectInfo<span class="token punctuation">,</span> templateInfo <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 模板安装完成后执行安装和启动模板</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> installCommand<span class="token punctuation">,</span> startCommand <span class="token punctuation">}</span> <span class="token operator">=</span> templateInfo<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 执行安装命令</span></span>
<span class="line">    <span class="token keyword">const</span> installResult <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">parsingCommandExec</span><span class="token punctuation">(</span></span>
<span class="line">      installCommand<span class="token punctuation">,</span></span>
<span class="line">      <span class="token string">&quot;installCommand&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">检测到installCommand存在，执行：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>installCommand<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>installResult <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;依赖安装成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 抛出错误，阻断后面执行</span></span>
<span class="line">      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;依赖安装失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 执行启动命令</span></span>
<span class="line">    <span class="token keyword">await</span> <span class="token function">parsingCommandExec</span><span class="token punctuation">(</span></span>
<span class="line">      startCommand<span class="token punctuation">,</span></span>
<span class="line">      <span class="token string">&quot;startCommand&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">检测到startCommand存在，执行：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>startCommand<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 如果报错，抛出错误</span></span>
<span class="line">    <span class="token keyword">throw</span> err<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 使用ejs渲染模板</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">ejsRender</span><span class="token punctuation">(</span><span class="token parameter">options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token literal-property property">targetPath</span><span class="token operator">:</span> cwd<span class="token punctuation">,</span> projectInfo <span class="token punctuation">}</span> <span class="token operator">=</span> options<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 获取匹配的文件</span></span>
<span class="line">    <span class="token keyword">const</span> files <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">glob</span><span class="token punctuation">(</span><span class="token string">&quot;**&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">      cwd<span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">ignore</span><span class="token operator">:</span> options<span class="token punctuation">.</span>ignore <span class="token operator">||</span> <span class="token string">&quot;node_modules/**&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 忽略内容</span></span>
<span class="line">      <span class="token literal-property property">nodir</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 不要文件夹</span></span>
<span class="line">      <span class="token literal-property property">dot</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 包含隐藏文件</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>files <span class="token operator">||</span> files<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;glob没有匹配到文件&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 遍历文件并渲染 EJS 模板</span></span>
<span class="line">    <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span></span>
<span class="line">      files<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">file</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> filePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>cwd<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> ejs<span class="token punctuation">.</span><span class="token function">renderFile</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> projectInfo<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token comment">// 写入渲染后的结果</span></span>
<span class="line">          fse<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">EJS 渲染文件 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>filePath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 出错: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>err<span class="token punctuation">.</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 捕获并处理所有错误</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;ejsRender 执行出错：&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">throw</span> err<span class="token punctuation">;</span> <span class="token comment">// 抛出错误，以便外部调用处理</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 解析并执行命令</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">command</span> 命令内容，如npm install、npm run dev</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">field</span> 接口数据中配置命令的字段名，如installCommand、startCommand</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">logInfo</span> 提示信息</span>
<span class="line"> * <span class="token keyword">@returns</span></span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">parsingCommandExec</span><span class="token punctuation">(</span><span class="token parameter">command<span class="token punctuation">,</span> field<span class="token punctuation">,</span> logInfo</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 命令不存在直接return</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>command<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>field<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 不存在，请查看数据是否存在该配置</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token comment">// 打印提示信息</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>logInfo<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 解析命令并执行</span></span>
<span class="line">  <span class="token keyword">const</span> cmds <span class="token operator">=</span> command<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> cmd <span class="token operator">=</span> <span class="token function">checkCommandInWhitelist</span><span class="token punctuation">(</span>cmds<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> args <span class="token operator">=</span> cmds<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从索引1开始到数组结束的所有元素</span></span>
<span class="line">  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">spawnAsync</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> args<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">stdio</span><span class="token operator">:</span> <span class="token string">&quot;inherit&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">cwd</span><span class="token operator">:</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 检查命令是否在白名单</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">checkCommandInWhitelist</span><span class="token punctuation">(</span><span class="token parameter">command</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token constant">COMMAND_WHITELIST</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 如果命令不在白名单</span></span>
<span class="line">    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span></span>
<span class="line">      <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">命令 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>command<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 不在白名单中，可能存在风险，已阻止程序运行</span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> command<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 使用commmonjs导出install方法</span></span>
<span class="line">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> install<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4、编写完自定义渲染逻辑后，你依然需要通过 <code>ejs变量</code> 来替换并渲染最终结果，比如修改 <code>package.json</code> 中的项目名称和版本号，还有刚才示例代码中新加入的项目描述选项。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>ejs变量</code> 的语法为 <code>&lt;%= 变量名 %&gt;</code> 。</p><p>对 <code>ejs</code> 有疑问？查看官方文档 <a href="https://www.npmjs.com/package/ejs" target="_blank" rel="noopener noreferrer">ejs</a> 。</p></div><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&lt;%= projectName %&gt;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&lt;%= projectVersion %&gt;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&lt;%= description %&gt;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string">&quot;...省略其他&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，你提供的项目模板代码中其它位置如果有需要也可以通过修改为 <code>ejs变量</code> 的形式来进行替换，最终 <code>init</code> 命令执行时会扫描所有文件，并将用到ejs变量的地方替换成真实内容。</p>`,6)),a("p",null,[n[22]||(n[22]=s("5、模板创建好后，你需要将模板发布到npm上，并配置 ")),p(e,{to:"/guide/configuration.html#%E6%9C%AC%E5%9C%B0json%E9%85%8D%E7%BD%AE%E6%A8%A1%E6%9D%BF"},{default:t(()=>n[20]||(n[20]=[s("本地JSON")])),_:1}),n[23]||(n[23]=s(" 或者 ")),p(e,{to:"/guide/configuration.html#mongodb%E9%85%8D%E7%BD%AE%E6%A8%A1%E6%9D%BF"},{default:t(()=>n[21]||(n[21]=[s("MongoDB")])),_:1}),n[24]||(n[24]=s(" 后即可执行 ")),n[25]||(n[25]=a("code",null,"init",-1)),n[26]||(n[26]=s(" 命令安装使用。"))]),n[124]||(n[124]=l(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>发布npm前，请先访问 <a href="https://www.npmjs.com/" target="_blank" rel="noopener noreferrer">npm官网</a>，确保网络连接正常，然后执行 <code>npm login</code> 进行登录，否则会发布失败。</p><p>发布新的版本前，请先提交代码，并更新版本号。</p></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 进入目录</span></span>
<span class="line"><span class="token builtin class-name">cd</span> cjp-cli-dev-template-vue3-custom</span>
<span class="line"><span class="token comment"># 发布npm包</span></span>
<span class="line"><span class="token function">npm</span> publish</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="如何创建组件库模板" tabindex="-1"><a class="header-anchor" href="#如何创建组件库模板"><span>如何创建组件库模板</span></a></h2><p>本节演示创建 vue3 组件库模板的过程，仅供参考。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>你也可以自己尝试创建一个组件库模板，只需要遵循脚手架约定的目录结构即可，约定为将组件库源码放在 <code>template</code> 目录中，并在 <code>template</code> 目录下创建 <code>examples</code> 目录，将最终的预览 html 页面放在该目录的 <code>dist</code> 目录中。</p><p><strong>目前 <code>publish</code> 命令的逻辑是在发布组件库时将读取模板 <code>/examples/dist/</code> 下的html文件</strong>。</p><p>关于如何创建通用组件库模板这里不做赘述。参考以下文章：</p><ul><li><a href="https://cloud.tencent.com/developer/article/1598054" target="_blank" rel="noopener noreferrer">https://cloud.tencent.com/developer/article/1598054</a></li><li><a href="https://blog.csdn.net/2401_83384536/article/details/140849379" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/2401_83384536/article/details/140849379</a></li><li><a href="https://worktile.com/kb/p/3633101" target="_blank" rel="noopener noreferrer">https://worktile.com/kb/p/3633101</a></li></ul></div><p>1、创建模板目录如 <code>cjp-cli-dev-template-vue3-component</code> ，并执行npm初始化。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>文件夹名就是你的npm包名，按你自己喜欢的来命名，写什么都行，只要npm上没这个包就可以，否则发不上去。</p></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">cd</span> cjp-cli-dev-template-vue3-component</span>
<span class="line"><span class="token function">npm</span> init <span class="token parameter variable">-y</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>2、在 <code>cjp-cli-dev-template-vue3-component</code> 目录中创建 <code>template</code> 文件夹，找个你认为优秀的项目作为模板，这里我用提前准备好的 <a href="https://gitee.com/Mr_Mikey/cjp-cli-dev-template/tree/master/cjp-cli-dev-template-vue3-component/template" target="_blank" rel="noopener noreferrer">vue3-webpack组件库模板</a> 作为演示，把模板内的所有文件都复制到 <code>template</code> 文件夹中。</p><p>此时你的目录结构应该长这样，其中 <code>template</code> 文件夹中的文件内容则作为脚手架命令最终下载的项目源文件。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">cjp-cli-dev-template-vue3-component     # 模板包名</span>
<span class="line">├─ template                             # 模板拷贝目录</span>
<span class="line">│  ├─ src                               # 组件项目源码</span>
<span class="line">│  ├─ vue.config.js                     # 组件项目配置</span>
<span class="line">│  ├─ package.json                      # 组件项目package.json</span>
<span class="line">│  └─ ...                               # 组件项目其他文件</span>
<span class="line">└─ package.json                         # 模板package.json</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、用过 <code>vue-cli</code> 下载模板你应该清楚，你输入的项目名称和版本号最终会写入到下载好的模板 <code>package.json</code> 中，它的实现方式就是通过 <code>ejs</code> 来解析和渲染最终的模板。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>ejs变量</code> 的语法为 <code>&lt;%= 变量名 %&gt;</code> 。</p><p>对 <code>ejs</code> 有疑问？查看官方文档 <a href="https://www.npmjs.com/package/ejs" target="_blank" rel="noopener noreferrer">ejs</a> 。</p></div><p>这一点脚手架 <code>init</code> 命令的实现方式和 <code>vue-cli</code> 是一致的，所以我们也需要修改项目 <code>package.json</code> ，将对应的位置替换成 <code>ejs变量</code> 。</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&lt;%= projectName %&gt;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&lt;%= projectVersion %&gt;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&lt;%= componentDescription %&gt;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dist/&lt;%= projectName %&gt;.umd.js&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dist/&lt;%= projectName %&gt;.esm.js&quot;</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 注意这个files很重要，将你想要发布到npm上的所有文件和路径都填上，否则发布后将会缺失这些文件</span></span>
<span class="line">  <span class="token property">&quot;files&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token string">&quot;build&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;dist&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;examples/&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;public/&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;src&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;.browserslistrc&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;.eslintrc.js&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;.travis.yml&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;babel.config.js&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;jest.config.js&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;jsconfig.json&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;README.md&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;tsconfig.json&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;vue.config.js&quot;</span></span>
<span class="line">  <span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">  <span class="token string">&quot;...省略其他&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，你提供的组件模板代码中其它位置如果有需要也可以通过修改为 <code>ejs变量</code> 的形式来进行替换，最终 <code>init</code> 命令执行时会扫描所有文件，并将用到ejs变量的地方替换成真实内容。</p><p><code>init</code> 命令安装 <code>组件模板</code> 时传递给 <code>ejs</code> 的变量有以下几个，你可以按需使用。</p><table><thead><tr><th>参数名</th><th>参数说明</th></tr></thead><tbody><tr><td>type</td><td>安装类型是项目还是组件库，项目返回project，组件库返回component</td></tr><tr><td>projectName</td><td>执行安装命令时你输入的组件项目名称</td></tr><tr><td>projectVersion</td><td>执行安装命令时你输入的组件项目版本</td></tr><tr><td>projectTemplate</td><td>执行安装命令时你选择安装的组件项目npm包名</td></tr><tr><td>componentDescription</td><td>执行安装命令时你输入的组件项目描述</td></tr></tbody></table>`,18)),a("p",null,[n[29]||(n[29]=s("4、模板创建好后，你需要将模板发布到npm上，并配置 ")),p(e,{to:"/guide/configuration.html#%E9%A1%B9%E7%9B%AE-%E7%BB%84%E4%BB%B6%E5%BA%93%E6%A8%A1%E6%9D%BF%E9%85%8D%E7%BD%AE"},{default:t(()=>n[27]||(n[27]=[s("本地JSON")])),_:1}),n[30]||(n[30]=s(" 或者 ")),p(e,{to:"/guide/configuration.html#mongodb%E9%85%8D%E7%BD%AE%E6%A8%A1%E6%9D%BF"},{default:t(()=>n[28]||(n[28]=[s("MongoDB")])),_:1}),n[31]||(n[31]=s(" 后即可执行 ")),n[32]||(n[32]=a("code",null,"init",-1)),n[33]||(n[33]=s(" 命令安装使用。"))]),n[125]||(n[125]=l(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>发布npm前，请先访问 <a href="https://www.npmjs.com/" target="_blank" rel="noopener noreferrer">npm官网</a>，确保网络连接正常，然后执行 <code>npm login</code> 进行登录，否则会发布失败。</p><p>发布新的版本前，请先提交代码，并更新版本号。</p></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 进入目录</span></span>
<span class="line"><span class="token builtin class-name">cd</span> cjp-cli-dev-template-vue3-component</span>
<span class="line"><span class="token comment"># 发布npm包</span></span>
<span class="line"><span class="token function">npm</span> publish</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到这一步我们基本完成了组件库模板创建，接着我们需要在 <code>template</code> 目录下创建预览代码目录 <code>examples</code> ， <code>examples/dist</code> 中的内容就是组件库对外展示的预览界面，有多个预览组件，则生成多个html文件即可。</p><h3 id="开发组件预览页面功能" tabindex="-1"><a class="header-anchor" href="#开发组件预览页面功能"><span>开发组件预览页面功能</span></a></h3><p>前面提供的 <a href="https://gitee.com/Mr_Mikey/cjp-cli-dev-template/tree/master/cjp-cli-dev-template-vue3-component/template" target="_blank" rel="noopener noreferrer">vue3-webpack组件库</a> 这个演示模板中已经存在 <code>examples</code> 和相关代码，你可以打开文件进行对照，大致过程如下。</p><p>1、通过 <code>vue-cli</code> 安装一个vue3模板作为演示，把下载的所有文件都拷贝到预览代码目录 <code>examples</code> 中。</p><p>2、在前面 <a href="https://gitee.com/Mr_Mikey/cjp-cli-dev-template/tree/master/cjp-cli-dev-template-vue3-component/template" target="_blank" rel="noopener noreferrer">vue3-webpack组件库</a> 这个演示模板中，运行构建命令会将结果输出到 <code>/dist/</code> 目录中，构建的文件名则是你在执行 <code>init</code> 命令时输入的名称，我们需要在预览项目 <code>examples/src/main.js</code> 中全局引入演示组件库。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span></span>
<span class="line"><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&#39;./App.vue&#39;</span></span>
<span class="line"><span class="token comment">// 这里也需要替换成 ejs变量，最终打包文件将会由你输入的项目名称来决定</span></span>
<span class="line"><span class="token keyword">import</span> LegoComponents <span class="token keyword">from</span> <span class="token string">&#39;../../dist/&lt;%= projectName %&gt;.esm&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 注册全局组件</span></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>LegoComponents<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、修改 <code>App.vue</code> ，增加测试代码，演示模板中提供了 <code>l-image</code> 组件。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;index&quot;</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>LImage用法演示<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 替换成你的图片路径或网络图片 <span class="token operator">--</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span>l<span class="token operator">-</span>image <span class="token operator">:</span>src<span class="token operator">=</span><span class="token string">&quot;require(&#39;./assets/logo.png&#39;)&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4、创建 <code>vue.config.js</code>，增加多页面打包配置，通过这种方式来实现多个组件预览的功能。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@vue/cli-service&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">transpileDependencies</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">publicPath</span><span class="token operator">:</span> <span class="token string">&#39;./&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// 多页面打包配置</span></span>
<span class="line">  <span class="token literal-property property">pages</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">index</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&quot;./src/main.js&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;./public/index.html&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// 你可以在 examples/src/ 目录下创建 main2.js ，并运行npm run build来进行测试</span></span>
<span class="line">    <span class="token comment">// 检查 dist 目录你将看到两个html文件。</span></span>
<span class="line">    <span class="token literal-property property">index2</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&quot;./src/main2.js&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;./public/index.html&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完成后升级 <code>cjp-cli-dev-template-vue3-component</code> 版本号，然后重新发布。<strong>发布前记得删除 <code>examples</code> 目录下的 <code>node_modules</code> ，嵌套结构不会被忽略</strong>。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 进入组件库模板目录</span></span>
<span class="line"><span class="token builtin class-name">cd</span> cjp-cli-dev-template-vue3-component</span>
<span class="line"><span class="token comment"># 更新patch版本（注意需要先提交代码，否则会失败，你也可以手动修改package.json版本号）</span></span>
<span class="line"><span class="token function">npm</span> version patch</span>
<span class="line"><span class="token comment"># 执行发布</span></span>
<span class="line"><span class="token function">npm</span> publish</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="测试预览页面功能" tabindex="-1"><a class="header-anchor" href="#测试预览页面功能"><span>测试预览页面功能</span></a></h3><p>创建一个文件夹如 <code>test-component</code> ，进入该目录，选择安装组件库模板。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">cd</span> test-component</span>
<span class="line">cjp-cli-dev init test-component</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>确保 <code>test-component</code> 已经安装依赖，执行构建命令打包组件库代码。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">npm</span> <span class="token function">install</span></span>
<span class="line"><span class="token function">npm</span> run build</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>确保 <code>examples</code> 中已经安装依赖，前面的步骤都完成后，启动项目你应该能看到以下页面内容。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">cd</span> examples</span>
<span class="line"><span class="token function">npm</span> <span class="token function">install</span></span>
<span class="line"><span class="token function">npm</span> run serve</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+r+`" alt="预览界面演示截图"></p><p>打包输出最终的预览 html 文件，脚手架 <code>publish</code> 命令执行时会读取这些文件。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">cd</span> examples</span>
<span class="line"><span class="token function">npm</span> run build</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就完成了组件库模板的创建和预览功能，再次强调你可以自定义组件库模板，遵循脚手架约定的目录结构即可。</p><blockquote><p>约定为将组件库源码放在 <code>template</code> 目录中，并在 <code>template</code> 目录下创建 <code>examples</code> 目录，将最终的预览 html 页面放在该目录的 <code>dist</code> 目录中。目前脚手架 <code>publish</code> 命令会读取这个路径中的 html 文件。</p></blockquote><h2 id="如何创建页面模板" tabindex="-1"><a class="header-anchor" href="#如何创建页面模板"><span>如何创建页面模板</span></a></h2><p>页面模板同样分为 <code>标准模板</code> 和 <code>自定义模板</code> ，在 <a href="#%E6%A6%82%E5%BF%B5%E8%A7%A3%E9%87%8A">概念解释</a> 中强调了定义，注意，<code>自定义模板</code> 和<code>标准模板</code> 的区别是 <code>自定义模板</code> 需要额外提供一个 <code>index.js</code> 作为入口文件来自定义渲染模板内容，这在脚手架命令源码中是规定好的。</p>`,28)),a("div",m,[n[39]||(n[39]=a("p",{class:"hint-container-title"},"提示",-1)),a("p",null,[n[35]||(n[35]=s("页面模板提供给脚手架 ")),n[36]||(n[36]=a("code",null,"add",-1)),n[37]||(n[37]=s(" 命令进行使用，查看 ")),p(e,{to:"/guide/core-command.html#%E5%A4%8D%E7%94%A8%E4%BB%A3%E7%A0%81-add%E5%91%BD%E4%BB%A4"},{default:t(()=>n[34]||(n[34]=[s("add命令")])),_:1}),n[38]||(n[38]=s(" 使用。"))])]),n[126]||(n[126]=l(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>请注意，<code>add</code> 命令目前仅支持vue项目。</p></div><h3 id="创建标准页面模板" tabindex="-1"><a class="header-anchor" href="#创建标准页面模板"><span>创建标准页面模板</span></a></h3><p>1、创建模板目录如 <code>cjp-cli-dev-template-vue3-page</code> ，并执行npm初始化。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>文件夹名就是你的npm包名，按你自己喜欢的来命名，写什么都行，只要npm上没这个包就可以，否则发不上去。</p></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">cd</span> cjp-cli-dev-template-vue3-page</span>
<span class="line"><span class="token function">npm</span> init <span class="token parameter variable">-y</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>2、在 <code>cjp-cli-dev-template-vue3-page</code> 目录中创建 <code>template</code> 文件夹，并在 <code>template</code> 文件夹中创建页面，你可以选择创建单个页面或者多个页面作为模板，但要求<strong>页面相关的代码都存放到一个目录中</strong>，模板还是使用 <code>ejs</code> 渲染，你可以按需替换内容为 <code>ejs变量</code>。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>ejs变量</code> 的语法为 <code>&lt;%= 变量名 %&gt;</code> 。</p><p>对 <code>ejs</code> 有疑问？查看官方文档 <a href="https://www.npmjs.com/package/ejs" target="_blank" rel="noopener noreferrer">ejs</a> 。</p></div><p><code>add</code> 命令安装 <code>标准页面模板</code> 时传递给 <code>ejs</code> 的变量有以下，你可以按需使用。</p><table><thead><tr><th>参数名</th><th>参数说明</th></tr></thead><tbody><tr><td>pageName</td><td>页面名称</td></tr></tbody></table><p>假设你现在有一个 <code>home</code> 页面需要大量复用，通过 <code>vue-cli</code> 你下载了一个标准vue模板如 <code>test-project</code>，你把 <code>home</code> 页面相关的依赖都拷贝到 <code>test-project/src/view/home</code> 目录下，紧接着你通过 <code>npm run dev</code> 命令启动项目调试，确认页面正确显示没有报错后就可以作为模板发布了，页面内容示例代码如下。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;&lt;%= pageName %&gt;&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%=</span> pageName <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">&lt;</span>script name<span class="token operator">=</span><span class="token string">&quot;&lt;%= pageName %&gt;&quot;</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">{</span><span class="token comment">/* 这是我的页面逻辑 */</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">&lt;</span>style scoped<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">%=</span> pageName <span class="token operator">%</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">color</span><span class="token operator">:</span> red<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着你可以将 <code>test-project</code> 所有文件都复制到 <code>template</code> 文件夹中。</p>`,12)),a("div",v,[n[53]||(n[53]=a("p",{class:"hint-container-title"},"提示",-1)),a("p",null,[n[41]||(n[41]=s("如果你想发布多个页面作为模板，推荐将 ")),n[42]||(n[42]=a("code",null,"test-project",-1)),n[43]||(n[43]=s(" 所有文件都复制到 ")),n[44]||(n[44]=a("code",null,"template",-1)),n[45]||(n[45]=s(" 文件夹中，你可以在 ")),n[46]||(n[46]=a("code",null,"test-project/src/view/",-1)),n[47]||(n[47]=s(" 目录下创建多个页面，如再创建一个 ")),n[48]||(n[48]=a("code",null,"home2",-1)),n[49]||(n[49]=s(" 页面，只需在 ")),p(e,{to:"/guide/configuration.html#%E9%A1%B5%E9%9D%A2%E6%A8%A1%E6%9D%BF%E5%AD%97%E6%AE%B5%E8%AF%B4%E6%98%8E"},{default:t(()=>n[40]||(n[40]=[s("配置模板字段")])),_:1}),n[50]||(n[50]=s(" 时增加 ")),n[51]||(n[51]=a("code",null,"targetPath",-1)),n[52]||(n[52]=s(" 配置指定你想安装哪个页面模板即可。"))])]),n[127]||(n[127]=l(`<p>此时你的目录结构应该长这样，其中 <code>template</code> 文件夹中的文件内容则作为脚手架命令最终下载的项目源文件。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">cjp-cli-dev-template-vue3-page     # 模板包名</span>
<span class="line">├─ template                        # 模板拷贝目录</span>
<span class="line">│  ├─ src                          # 项目源码</span>
<span class="line">│  |  ├─ home                      # home目录</span>
<span class="line">│  |  |  ├─ components             # home页面组件</span>
<span class="line">│  |  |  ├─ images                 # home页面图片</span>
<span class="line">│  |  |  └─ index.vue              # home页面代码</span>
<span class="line">│  |  ├─ home2                     # home2目录</span>
<span class="line">│  |  |  ├─ components             # home2页面组件</span>
<span class="line">│  |  |  ├─ images                 # home2页面图片</span>
<span class="line">│  |  └─ └─ index.vue              # home2页面代码</span>
<span class="line">│  ├─ package.json                 # 项目package.json</span>
<span class="line">│  └─ ...                          # 项目其他文件</span>
<span class="line">└─ package.json                    # 模板package.json</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2)),a("p",null,[n[56]||(n[56]=s("3、模板创建好后，你需要将模板发布到npm上，并配置 ")),p(e,{to:"/guide/configuration.html#%E9%A1%B5%E9%9D%A2%E6%A8%A1%E6%9D%BF%E9%85%8D%E7%BD%AE"},{default:t(()=>n[54]||(n[54]=[s("本地JSON")])),_:1}),n[57]||(n[57]=s(" 或者 ")),p(e,{to:"/guide/configuration.html#mongodb%E9%85%8D%E7%BD%AE%E6%A8%A1%E6%9D%BF"},{default:t(()=>n[55]||(n[55]=[s("MongoDB")])),_:1}),n[58]||(n[58]=s(" 后即可执行 ")),n[59]||(n[59]=a("code",null,"init",-1)),n[60]||(n[60]=s(" 命令安装使用。"))]),n[128]||(n[128]=l(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>发布npm前，请先访问 <a href="https://www.npmjs.com/" target="_blank" rel="noopener noreferrer">npm官网</a>，确保网络连接正常，然后执行 <code>npm login</code> 进行登录，否则会发布失败。</p><p>发布新的版本前，请先提交代码，并更新版本号。</p></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 进入目录</span></span>
<span class="line"><span class="token builtin class-name">cd</span> cjp-cli-dev-template-vue3</span>
<span class="line"><span class="token comment"># 发布npm包</span></span>
<span class="line"><span class="token function">npm</span> publish</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建自定义页面模板" tabindex="-1"><a class="header-anchor" href="#创建自定义页面模板"><span>创建自定义页面模板</span></a></h3><p>在 <a href="#%E6%A6%82%E5%BF%B5%E8%A7%A3%E9%87%8A">概念解释</a> 中提到过 <code>自定义模板</code> 和<code>标准模板</code> 的区别是 <code>自定义模板</code> 需要额外提供一个 <code>index.js</code> 作为入口文件来自定义渲染模板内容，这在脚手架命令源码中是规定好的。</p><p>1、与创建 <code>标准页面模板</code> 一样，创建 <code>自定义页面模板</code> 目录如 <code>cjp-cli-dev-template-vue3-page-custom</code> ，并执行npm初始化。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>文件夹名就是你的npm包名，按你自己喜欢的来命名，写什么都行，只要npm上没这个包就可以，否则发不上去。</p></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">cd</span> cjp-cli-dev-template-vue3-page-custom</span>
<span class="line"><span class="token function">npm</span> init <span class="token parameter variable">-y</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>2、在 <code>cjp-cli-dev-template-vue3-page-custom</code> 目录中创建 <code>template</code> 文件夹，并在 <code>template</code> 文件夹中创建页面，你可以选择创建单个页面或者多个页面作为模板，但要求<strong>页面相关的代码都存放到一个目录中</strong>，模板还是使用 <code>ejs</code> 渲染，你可以按需替换内容为 <code>ejs变量</code>。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>ejs变量</code> 的语法为 <code>&lt;%= 变量名 %&gt;</code> 。</p><p>对 <code>ejs</code> 有疑问？查看官方文档 <a href="https://www.npmjs.com/package/ejs" target="_blank" rel="noopener noreferrer">ejs</a> 。</p></div><p><code>add</code> 命令安装 <code>标准页面模板</code> 时传递给 <code>ejs</code> 的变量有以下，你可以按需使用。</p><table><thead><tr><th>参数名</th><th>参数说明</th></tr></thead><tbody><tr><td>pageName</td><td>执行add命令时你输入的页面名称</td></tr></tbody></table><p>假设你现在有一个 <code>home</code> 页面需要大量复用，通过 <code>vue-cli</code> 你下载了一个标准vue模板如 <code>test-project</code>，你把 <code>home</code> 页面相关的依赖都拷贝到 <code>test-project/src/view/home</code> 目录下，紧接着你通过 <code>npm run dev</code> 命令启动项目调试，确认页面正确显示没有报错后就可以作为模板发布了，页面内容示例代码如下。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;&lt;%= pageName %&gt;&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%=</span> pageName <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">&lt;</span>script name<span class="token operator">=</span><span class="token string">&quot;&lt;%= pageName %&gt;&quot;</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">{</span><span class="token comment">/* 这是我的页面逻辑 */</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">&lt;</span>style scoped<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">%=</span> pageName <span class="token operator">%</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">color</span><span class="token operator">:</span> red<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着你可以将 <code>test-project</code> 所有文件都复制到 <code>template</code> 文件夹中。</p>`,14)),a("div",b,[n[74]||(n[74]=a("p",{class:"hint-container-title"},"提示",-1)),a("p",null,[n[62]||(n[62]=s("如果你想发布多个页面作为模板，推荐将 ")),n[63]||(n[63]=a("code",null,"test-project",-1)),n[64]||(n[64]=s(" 所有文件都复制到 ")),n[65]||(n[65]=a("code",null,"template",-1)),n[66]||(n[66]=s(" 文件夹中，你可以在 ")),n[67]||(n[67]=a("code",null,"test-project/src/view/",-1)),n[68]||(n[68]=s(" 目录下创建多个页面，如再创建一个 ")),n[69]||(n[69]=a("code",null,"home2",-1)),n[70]||(n[70]=s(" 页面，只需在 ")),p(e,{to:"/guide/configuration.html#%E9%A1%B5%E9%9D%A2%E6%A8%A1%E6%9D%BF%E5%AD%97%E6%AE%B5%E8%AF%B4%E6%98%8E"},{default:t(()=>n[61]||(n[61]=[s("配置模板字段")])),_:1}),n[71]||(n[71]=s(" 时增加 ")),n[72]||(n[72]=a("code",null,"targetPath",-1)),n[73]||(n[73]=s(" 配置指定你想安装哪个页面模板即可。"))])]),n[129]||(n[129]=l(`<p>此时你的目录结构应该长这样，其中 <code>template</code> 文件夹中的文件内容则作为脚手架命令最终下载的项目源文件。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">cjp-cli-dev-template-vue3-page-custom     # 模板包名</span>
<span class="line">├─ template                        # 模板拷贝目录</span>
<span class="line">│  ├─ src                          # 项目源码</span>
<span class="line">│  |  ├─ home                      # home目录</span>
<span class="line">│  |  |  ├─ components             # home页面组件</span>
<span class="line">│  |  |  ├─ images                 # home页面图片</span>
<span class="line">│  |  |  └─ index.vue              # home页面代码</span>
<span class="line">│  |  ├─ home2                     # home2目录</span>
<span class="line">│  |  |  ├─ components             # home2页面组件</span>
<span class="line">│  |  |  ├─ images                 # home2页面图片</span>
<span class="line">│  |  └─ └─ index.vue              # home2页面代码</span>
<span class="line">│  ├─ package.json                 # 项目package.json</span>
<span class="line">│  └─ ...                          # 项目其他文件</span>
<span class="line">└─ package.json                    # 模板package.json</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、你需要编写自定义渲染逻辑，约定为在 <code>index.js</code> 中使用 <code>commonjs</code> 规范导出 <code>install</code> 方法，最终执行 <code>add</code> 命令在你选择安装 <code>自定义页面模板</code> 时，将会读取这个 <code>index.js</code> 文件，并执行 <code>install</code> 方法进行安装。</p><p><code>install</code> 方法接收 <code>options</code> 参数，<code>add</code> 命令安装 <code>自定义项目模板</code> 时会将以下参数传递给<code>install</code> 方法，你可以按需使用。</p>`,4)),a("table",null,[n[81]||(n[81]=a("thead",null,[a("tr",null,[a("th",null,"参数名"),a("th",null,"参数说明")])],-1)),a("tbody",null,[a("tr",null,[n[78]||(n[78]=a("td",null,"templateInfo",-1)),a("td",null,[n[76]||(n[76]=s("模板配置信息对象，查看 ")),p(e,{to:"/guide/configuration.html#%E9%A1%B5%E9%9D%A2%E6%A8%A1%E6%9D%BF%E5%AD%97%E6%AE%B5%E8%AF%B4%E6%98%8E"},{default:t(()=>n[75]||(n[75]=[s("模板字段说明")])),_:1}),n[77]||(n[77]=s("，会新增一个用户额外输入的pageName属性"))])]),n[79]||(n[79]=a("tr",null,[a("td",null,"templatePath"),a("td",null,"模板源路径")],-1)),n[80]||(n[80]=a("tr",null,[a("td",null,"targetPath"),a("td",null,"安装目标路径")],-1))])]),n[130]||(n[130]=l(`<p>举个例子，假设我想在安装 <code>自定义页面模板</code> 时，打印 <code>我正在执行自定义页面模板安装</code> ，请参考以下代码实现，你可以尝试加入更多渲染逻辑，最终需要 <code>commonjs</code> 规范导出的 <code>install</code> 方法即可。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span></span>
<span class="line">  fse<span class="token punctuation">,</span> <span class="token comment">// 文件操作</span></span>
<span class="line">  ejs<span class="token punctuation">,</span> <span class="token comment">// ejs渲染</span></span>
<span class="line">  glob<span class="token punctuation">,</span> <span class="token comment">// 文件匹配</span></span>
<span class="line">  semver<span class="token punctuation">,</span> <span class="token comment">// 标准版本号判断</span></span>
<span class="line">  spawnAsync<span class="token punctuation">,</span> <span class="token comment">// 执行进程</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;@cjp-cli-dev/utils&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 工具方法 - 你需要先安装@cjp-cli-dev/utils，也可以自己去npm找对应包安装</span></span>
<span class="line"><span class="token keyword">const</span> readPkgUp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;read-pkg-up&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 用于查找根目录下的package.json，需要先安装</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 代码来源于cjp-cli-dev/commands/add/lib/index.js 下载和渲染逻辑</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">install</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 执行打印信息</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;我正在执行自定义页面模板安装&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> templatePath<span class="token punctuation">,</span> targetPath<span class="token punctuation">,</span> pageTemplate <span class="token punctuation">}</span> <span class="token operator">=</span> options<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">try</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 将模板路径的所有文件拷贝到目标路径中</span></span>
<span class="line">    fse<span class="token punctuation">.</span><span class="token function">copySync</span><span class="token punctuation">(</span>templatePath<span class="token punctuation">,</span> targetPath<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 使用ejs渲染目标路径中的文件</span></span>
<span class="line">    <span class="token keyword">await</span> <span class="token function">ejsRender</span><span class="token punctuation">(</span><span class="token punctuation">{</span> targetPath<span class="token punctuation">,</span> pageTemplate <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 如果拷贝的模板中有依赖外部node_modules包，需要检查和合并依赖</span></span>
<span class="line">    <span class="token comment">// 合并依赖完成后自动帮用户重新安装依赖</span></span>
<span class="line">    <span class="token keyword">await</span> <span class="token function">mergeDependencies</span><span class="token punctuation">(</span><span class="token punctuation">{</span> templatePath<span class="token punctuation">,</span> targetPath <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 如果报错，抛出错误</span></span>
<span class="line">    <span class="token keyword">throw</span> err<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 如果拷贝的模板中有依赖外部node_modules包，需要检查和合并依赖</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">mergeDependencies</span><span class="token punctuation">(</span><span class="token parameter">options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 处理依赖合并问题</span></span>
<span class="line">  <span class="token comment">// 场景一：模板中存在依赖，项目中不存在（拷贝依赖）</span></span>
<span class="line">  <span class="token comment">// 场景二：模板中存在依赖，项目中也存在（不会拷贝依赖，但是在脚手架中给予提示，让开发者手动处理）</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> templatePath<span class="token punctuation">,</span> targetPath <span class="token punctuation">}</span> <span class="token operator">=</span> options<span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 获取package.json readPkgUp.sync会返回{ packageJson, path }</span></span>
<span class="line">  <span class="token keyword">const</span> templatePkg <span class="token operator">=</span> readPkgUp<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">cwd</span><span class="token operator">:</span> templatePath<span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">normalize</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> targetPkg <span class="token operator">=</span> readPkgUp<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">cwd</span><span class="token operator">:</span> targetPath<span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">normalize</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 获取依赖dependencies</span></span>
<span class="line">  <span class="token keyword">const</span> templateDependencies <span class="token operator">=</span> templatePkg<span class="token punctuation">.</span>packageJson<span class="token punctuation">.</span>dependencies <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> targetDependencies <span class="token operator">=</span> targetPkg<span class="token punctuation">.</span>packageJson<span class="token punctuation">.</span>dependencies <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 将对象转化为数组</span></span>
<span class="line">  <span class="token keyword">const</span> templateDependenciesArr <span class="token operator">=</span> <span class="token function">objectToArray</span><span class="token punctuation">(</span>templateDependencies<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> targetDependenciesArr <span class="token operator">=</span> <span class="token function">objectToArray</span><span class="token punctuation">(</span>targetDependencies<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 实现dependencies的diff</span></span>
<span class="line">  <span class="token keyword">const</span> newDependencies <span class="token operator">=</span> <span class="token function">dependenciesDiff</span><span class="token punctuation">(</span></span>
<span class="line">    templateDependenciesArr<span class="token punctuation">,</span></span>
<span class="line">    targetDependenciesArr</span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 将合并后的依赖写入到目标路径的package.json中dependencies里</span></span>
<span class="line">  targetPkg<span class="token punctuation">.</span>packageJson<span class="token punctuation">.</span>dependencies <span class="token operator">=</span> <span class="token function">arrayToObject</span><span class="token punctuation">(</span>newDependencies<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  fse<span class="token punctuation">.</span><span class="token function">writeJsonSync</span><span class="token punctuation">(</span>targetPkg<span class="token punctuation">.</span>path<span class="token punctuation">,</span> targetPkg<span class="token punctuation">.</span>packageJson<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">spaces</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 写入package.json并给两个字符的缩进</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 帮用户合并完依赖之后也自动帮用户安装好依赖（安装路径为当前项目package.json所在目录，通过path.dir来获得）</span></span>
<span class="line">  <span class="token keyword">await</span> <span class="token function">execCommand</span><span class="token punctuation">(</span><span class="token string">&quot;npm install&quot;</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">dirname</span><span class="token punctuation">(</span>targetPkg<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 使用ejs渲染模板</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">ejsRender</span><span class="token punctuation">(</span><span class="token parameter">options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> targetPath<span class="token punctuation">,</span> pageTemplate <span class="token punctuation">}</span> <span class="token operator">=</span> options<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> pageName<span class="token punctuation">,</span> ignore <span class="token punctuation">}</span> <span class="token operator">=</span> pageTemplate<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 获取匹配的文件</span></span>
<span class="line">    <span class="token keyword">const</span> files <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">glob</span><span class="token punctuation">(</span><span class="token string">&quot;**&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">cwd</span><span class="token operator">:</span> targetPath<span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">ignore</span><span class="token operator">:</span> ignore <span class="token operator">||</span> <span class="token string">&quot;**/node_modules/**&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 忽略内容</span></span>
<span class="line">      <span class="token literal-property property">nodir</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 不要文件夹</span></span>
<span class="line">      <span class="token literal-property property">dot</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 包含隐藏文件</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>files <span class="token operator">||</span> files<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;glob没有匹配到文件&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 遍历文件并渲染 EJS 模板</span></span>
<span class="line">    <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span></span>
<span class="line">      files<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">file</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 获取文件真实路径</span></span>
<span class="line">        <span class="token keyword">const</span> filePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>targetPath<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token comment">// 第二个参数是ejs渲染所需要的变量，如 &lt;%= name %&gt;</span></span>
<span class="line">          <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> ejs<span class="token punctuation">.</span><span class="token function">renderFile</span><span class="token punctuation">(</span></span>
<span class="line">            filePath<span class="token punctuation">,</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">              <span class="token literal-property property">name</span><span class="token operator">:</span> pageName<span class="token punctuation">,</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">          <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token comment">// 写入渲染后的结果</span></span>
<span class="line">          fse<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">EJS 渲染文件 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>filePath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 出错: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>err<span class="token punctuation">.</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 捕获并处理所有错误</span></span>
<span class="line">    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;ejsRender 执行出错：&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">throw</span> err<span class="token punctuation">;</span> <span class="token comment">// 抛出错误，以便外部调用处理</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 异步执行命令</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">execCommand</span><span class="token punctuation">(</span><span class="token parameter">command<span class="token punctuation">,</span> cwd</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> result<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>command<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;命令不存在！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token comment">// npm install =&gt; [&#39;npm&#39;, &#39;install&#39;]</span></span>
<span class="line">  <span class="token keyword">const</span> commandArr <span class="token operator">=</span> command<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> cmd <span class="token operator">=</span> commandArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> args <span class="token operator">=</span> commandArr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">spawnAsync</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> args<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">stdio</span><span class="token operator">:</span> <span class="token string">&quot;inherit&quot;</span><span class="token punctuation">,</span> cwd <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>command<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 命令执行失败！</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">objectToArray</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">      key<span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">value</span><span class="token operator">:</span> o<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> arr<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">arrayToObject</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  a<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    obj<span class="token punctuation">[</span>item<span class="token punctuation">.</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">.</span>value<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> obj<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">dependenciesDiff</span><span class="token punctuation">(</span><span class="token parameter">templateDepArr<span class="token punctuation">,</span> targetDepArr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>targetDepArr<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  templateDepArr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">templateDep</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 找出重复的依赖</span></span>
<span class="line">    <span class="token keyword">const</span> duplicatedDep <span class="token operator">=</span> targetDepArr<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span></span>
<span class="line">      <span class="token punctuation">(</span><span class="token parameter">targetDep</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> templateDep<span class="token punctuation">.</span>key <span class="token operator">===</span> targetDep<span class="token punctuation">.</span>key</span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 场景一：模板中存在依赖，项目中不存在（拷贝依赖）</span></span>
<span class="line">    <span class="token comment">// 将不重复的依赖push到目标dependencies中</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>duplicatedDep<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;检测到新的依赖：&quot;</span><span class="token punctuation">,</span> templateDep<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>templateDep<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;检测到重复依赖：&quot;</span><span class="token punctuation">,</span> duplicatedDep<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment">// 场景二：模板中存在依赖，项目中也存在（不会拷贝依赖，但是在脚手架中给予提示，让开发者手动处理）</span></span>
<span class="line">      <span class="token comment">// 对版本的上限进行比较，上限不一样就提示</span></span>
<span class="line">      <span class="token keyword">const</span> templateRange <span class="token operator">=</span> semver<span class="token punctuation">.</span><span class="token function">validRange</span><span class="token punctuation">(</span>templateDep<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">const</span> targetRange <span class="token operator">=</span> semver<span class="token punctuation">.</span><span class="token function">validRange</span><span class="token punctuation">(</span>duplicatedDep<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>templateRange <span class="token operator">!==</span> targetRange<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span></span>
<span class="line">          <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>templateDep<span class="token punctuation">.</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 依赖冲突 \\n模板依赖版本：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>templateDep<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> \\n本地依赖版本：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>duplicatedDep<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> \\n请手动处理冲突依赖版本为您希望使用的版本</span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> install<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2)),a("p",null,[n[84]||(n[84]=s("3、模板创建好后，你需要将模板发布到npm上，并配置 ")),p(e,{to:"/guide/configuration.html#%E6%9C%AC%E5%9C%B0json%E9%85%8D%E7%BD%AE%E6%A8%A1%E6%9D%BF"},{default:t(()=>n[82]||(n[82]=[s("本地JSON")])),_:1}),n[85]||(n[85]=s(" 或者 ")),p(e,{to:"/guide/configuration.html#mongodb%E9%85%8D%E7%BD%AE%E6%A8%A1%E6%9D%BF"},{default:t(()=>n[83]||(n[83]=[s("MongoDB")])),_:1}),n[86]||(n[86]=s(" 后即可执行 ")),n[87]||(n[87]=a("code",null,"add",-1)),n[88]||(n[88]=s(" 命令安装使用。"))]),n[131]||(n[131]=l(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>发布npm前，请先访问 <a href="https://www.npmjs.com/" target="_blank" rel="noopener noreferrer">npm官网</a>，确保网络连接正常，然后执行 <code>npm login</code> 进行登录，否则会发布失败。</p><p>发布新的版本前，请先提交代码，并更新版本号。</p></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 进入目录</span></span>
<span class="line"><span class="token builtin class-name">cd</span> cjp-cli-dev-template-vue3-page-custom</span>
<span class="line"><span class="token comment"># 发布npm包</span></span>
<span class="line"><span class="token function">npm</span> publish</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="如何创建代码片段模板" tabindex="-1"><a class="header-anchor" href="#如何创建代码片段模板"><span>如何创建代码片段模板</span></a></h2>`,3)),a("div",g,[n[94]||(n[94]=a("p",{class:"hint-container-title"},"提示",-1)),a("p",null,[n[90]||(n[90]=s("组件代码片段模板提供给脚手架 ")),n[91]||(n[91]=a("code",null,"add",-1)),n[92]||(n[92]=s(" 命令进行使用，查看 ")),p(e,{to:"/guide/core-command.html#%E5%A4%8D%E7%94%A8%E4%BB%A3%E7%A0%81-add%E5%91%BD%E4%BB%A4"},{default:t(()=>n[89]||(n[89]=[s("add命令")])),_:1}),n[93]||(n[93]=s(" 使用。"))])]),n[132]||(n[132]=l(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>你可以把代码片段可以理解为组件，目前脚手架 <code>add</code> 命令暂支持添加 <code>vue组件</code> ，未来会扩展。</p></div><h3 id="创建组件代码片段模板" tabindex="-1"><a class="header-anchor" href="#创建组件代码片段模板"><span>创建组件代码片段模板</span></a></h3><p>1、创建模板目录如 <code>cjp-cli-dev-template-vue3-section</code> ，并执行npm初始化。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>文件夹名就是你的npm包名，按你自己喜欢的来命名，写什么都行，只要npm上没这个包就可以，否则发不上去。</p></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">cd</span> cjp-cli-dev-template-vue3-section</span>
<span class="line"><span class="token function">npm</span> init <span class="token parameter variable">-y</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>2、在 <code>cjp-cli-dev-template-vue3-section</code> 目录中创建 <code>template</code> 文件夹，并在 <code>template</code> 文件夹中创建组件，你可以选择创建单个.vue组件或者多个组件作为模板，但要求<strong>组件相关的代码都存放到一个目录中，需要注意的是组件代码片段不使用 <code>ejs</code> 渲染，所以你无需为组件代码片段模板创建 <code>ejs变量</code></strong>。</p><p><code>add</code> 命令安装 <code>组件代码片段模板</code> 时会提示输入以下属性，该属性将作为你的 <code>组件name</code> 在当前页面中注册使用。</p><table><thead><tr><th>参数名</th><th>参数说明</th></tr></thead><tbody><tr><td>sectionName</td><td>执行add命令时你输入的组件名称</td></tr></tbody></table><p>假设你现在有一个 <code>List</code> 组件需要大量复用，通过 <code>vue-cli</code> 你下载了一个标准vue模板如 <code>test-project</code>，你把 <code>List</code> 组件拷贝到 <code>test-project/src/List.vue</code> ，紧接着你通过 <code>npm run dev</code> 命令启动项目调试，确认组件正确显示没有报错后就可以作为模板发布了，然后你可以将 <code>List.vue</code> 中的代码拷贝到 <code>cjp-cli-dev-template-vue3-section/template/index.vue</code> 中（脚手架命令约定组件代码片段均为 <code>index.vue</code> ），假设 <code>List</code> 组件示例代码如下。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;list&quot;</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;item&quot;</span><span class="token operator">&gt;</span>test list<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">setup</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&#39;测试列表组件&#39;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">&lt;</span>style scoped<span class="token operator">&gt;</span></span>
<span class="line"><span class="token punctuation">.</span>list <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">color</span><span class="token operator">:</span> red<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时你的目录结构应该长这样，其中 <code>template</code> 文件夹中的文件内容则作为脚手架命令最终下载的项目源文件。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line"># 单个.vue组件作为模板</span>
<span class="line">cjp-cli-dev-template-vue3-section    # 模板包名</span>
<span class="line">├─ template                          # 模板拷贝目录</span>
<span class="line">│  └─ index.vue                      # 将你的List组件内容拷贝到index.vue中</span>
<span class="line">└─ package.json                      # 模板package.json</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12)),a("div",h,[n[104]||(n[104]=a("p",{class:"hint-container-title"},"提示",-1)),a("p",null,[n[96]||(n[96]=s("如果你想发布多个组件作为模板，请将组件都复制到 ")),n[97]||(n[97]=a("code",null,"template",-1)),n[98]||(n[98]=s(" 文件夹中，如再创建一个 ")),n[99]||(n[99]=a("code",null,"list2",-1)),n[100]||(n[100]=s(" 组件，只需在 ")),p(e,{to:"/guide/configuration.html#%E9%A1%B5%E9%9D%A2%E6%A8%A1%E6%9D%BF%E5%AD%97%E6%AE%B5%E8%AF%B4%E6%98%8E"},{default:t(()=>n[95]||(n[95]=[s("配置模板字段")])),_:1}),n[101]||(n[101]=s(" 时增加 ")),n[102]||(n[102]=a("code",null,"targetPath",-1)),n[103]||(n[103]=s(" 配置指定你想安装哪个组件模板即可。"))]),n[105]||(n[105]=l("<p>请注意，在这个目录结构下，如果你将 <code>targetPath</code> 设置为 <code>./</code> ，则会将 <code>template</code> 目录中所有的内容当做一个组件整体进行拷贝，如果你想发布多个组件，请将所有组件都使用文件夹进行包装，并在文件夹中使用 <code>index.vue</code> 作为组件的入口文件，然后设置 <code>targetPath</code> 为你想安装的组件，如 <code>list2/</code> 。</p>",1))]),n[133]||(n[133]=l(`<p>此时你的目录结构应该长这样，其中 <code>template</code> 文件夹中的文件内容则作为脚手架命令最终下载的项目源文件。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line"># 创建一个项目，放多个组件作为模板，通过配置targetPath决定要被下载的组件</span>
<span class="line">cjp-cli-dev-template-vue3-page     # 模板包名</span>
<span class="line">├─ template                        # 模板拷贝目录</span>
<span class="line">|  ├─ List                         # List组件</span>
<span class="line">|  ├─ ├─ images                    # List组件图片</span>
<span class="line">|  └─ └─ index.vue                 # List组件入口文件</span>
<span class="line">│  ├─ List2                        # List2组件</span>
<span class="line">|  ├─ ├─ images                    # List2组件图片</span>
<span class="line">|  └─ └─ index.vue                 # List2组件入口文件</span>
<span class="line">└─ package.json                    # 模板package.json</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2)),a("p",null,[n[108]||(n[108]=s("3、模板创建好后，你需要将模板发布到npm上，并配置 ")),p(e,{to:"/guide/configuration.html#%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5%E6%A8%A1%E6%9D%BF%E9%85%8D%E7%BD%AE"},{default:t(()=>n[106]||(n[106]=[s("本地JSON")])),_:1}),n[109]||(n[109]=s(" 或者 ")),p(e,{to:"/guide/configuration.html#mongodb%E9%85%8D%E7%BD%AE%E6%A8%A1%E6%9D%BF"},{default:t(()=>n[107]||(n[107]=[s("MongoDB")])),_:1}),n[110]||(n[110]=s(" 后即可执行 ")),n[111]||(n[111]=a("code",null,"add",-1)),n[112]||(n[112]=s(" 命令安装使用。"))]),n[134]||(n[134]=l(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>使用 <code>add</code> 命令复用 <code>页面模板</code> 和 <code>组件代码片段</code> 行为有所区别，复用 <code>页面模板</code> 时直接就在命令当前运行目录下创建 <code>页面模板</code>，而 <code>组件代码片段</code> 则会先在命令当前运行目录下检查 <code>components</code> 文件夹，没有则创建该文件夹，并在 <code>components</code> 文件夹中创建 <code>组件代码片段模板</code> 。</p></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>发布npm前，请先访问 <a href="https://www.npmjs.com/" target="_blank" rel="noopener noreferrer">npm官网</a>，确保网络连接正常，然后执行 <code>npm login</code> 进行登录，否则会发布失败。</p><p>发布新的版本前，请先提交代码，并更新版本号。</p></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 进入目录</span></span>
<span class="line"><span class="token builtin class-name">cd</span> cjp-cli-dev-template-vue3-section</span>
<span class="line"><span class="token comment"># 发布npm包</span></span>
<span class="line"><span class="token function">npm</span> publish</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="扩展" tabindex="-1"><a class="header-anchor" href="#扩展"><span>扩展</span></a></h2><p>你应该看到前面演示创建 <code>组件代码片段</code> 模板如 <code>List.vue</code> 组件时，可以将 <code>List.vue</code> 组件直接拷贝到 <code>template</code> 文件夹中，<code>.vue</code> 文件不能和 <code>.html</code> 文件一样直接打开浏览器预览，如果某天这个组件模板需要迭代新的功能，而且又交接给另一个人，他看不了组件实际效果没法迭代升级怎么办？接下来就需要解决这个问题。</p><h4 id="组件模板不使用完整项目代码的情况下-如何预览实际效果" tabindex="-1"><a class="header-anchor" href="#组件模板不使用完整项目代码的情况下-如何预览实际效果"><span>组件模板不使用完整项目代码的情况下，如何预览实际效果？</span></a></h4><p>答案是创建一个 <strong><code>壳应用</code></strong>，通过运行 <strong><code>壳应用</code></strong> 来加载组件，实现预览功能。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p><strong><code>壳应用</code></strong> 指的是包含运行项目所需的完整依赖和配置，为外部组件提供运行环境的应用。</p></div><h3 id="如何创建壳应用" tabindex="-1"><a class="header-anchor" href="#如何创建壳应用"><span><strong>如何创建壳应用</strong></span></a></h3><p>这里我们借助 <code>webpack plugin</code> 的方式，通过插件来实现，以 vue3 作为演示，你可以按需修改，原理是一致的。</p><p>1、创建壳应用文件夹如 <code>cjp-cli-dev-vue3-section-plugin</code> ，并执行npm初始化。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">cd</span> cjp-cli-dev-vue3-section-plugin</span>
<span class="line"><span class="token function">npm</span> init <span class="token parameter variable">-y</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>稍后我们需要将 <code>壳应用</code> 发布到 npm 上给组件代码片段模板使用，文件夹名就是你的npm包名，按你自己喜欢的来命名，写什么都行，只要npm上没这个包就可以，否则发不上去。</p></div><p>2、修改 <code>package.json</code> 入口 <code>main</code> 字段，如：<code>CjpCliDevSectionPlugin.js</code>，并在根目录下创建该 js 文件。</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cjp-cli-dev-vue3-section-plugin&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;代码片段壳应用-webpack插件&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;CjpCliDevSectionPlugin.js&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string">&quot;...省略&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、创建一个标准vue3项目的必要结构目录</p><p>创建 <code>public</code> 文件夹，并在文件夹中创建 <code>index.html</code>，作为最终渲染运行的页面入口，示例代码如下：</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>vue3-section-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token comment">&lt;!-- 最终渲染的容器 --&gt;</span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app-section<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建 <code>src</code> 文件夹，并在文件夹中创建 <code>index.js</code> ，作为vue应用的入口 js 文件，你可以理解为 main.js，示例代码如下：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 引入组件代码片段</span></span>
<span class="line"><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&#39;section&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 创建壳应用并挂载组件代码片段</span></span>
<span class="line"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 渲染到#app-section容器</span></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app-section&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4、编写 <code>CjpCliDevSectionPlugin.js</code> ，完成 webpack 插件功能，开发插件推荐使用 <code>class</code> 形式，并通过 <code>commonjs</code> 规范导出该插件，因为 webpack 遵循 <code>commonjs</code> 规范。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>自定义开发 <code>webpack插件</code>，一般一个具体的 <code>plugin</code> 由下面部分组成：</p><ol><li>一个具名 JavaScript 函数。</li><li>在它的原型上定义 apply 方法。</li><li>指定一个触及到 webpack 本身的事件钩子。</li><li>操作 webpack 内部的实例特定数据。</li><li>在实现功能后调用 webpack 提供的 callback。</li></ol><p>查阅官方文档 <a href="https://webpack.docschina.org/contribute/writing-a-plugin" target="_blank" rel="noopener noreferrer">webpack自定义插件</a></p></div><p>这里有两个难点要实现：</p><ol><li>修改 webpack 的 entry，让它实际上构建的文件转移到 <code>public/index.html</code> 和 <code>src/index.js</code> 中。</li><li>解决组件代码片段的路径引用问题，也就是让 <code>import App from &#39;section&#39;</code> 能够引用到实际的组件代码。</li></ol><p>解决第一个难点需要使用 <code>html-webpack-plugin</code> 插件，通过它来修改 html 模板路径和入口 js 文件路径。</p><p>解决第二个难点需要使用 <code>webpack 的 resolve.alias</code> 配置，通过设置别名让壳应用能够找到组件代码片段中的源码文件。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>查看官方文档</p><p><a href="https://webpack.docschina.org/plugins/html-webpack-plugin/" target="_blank" rel="noopener noreferrer">html-webpack-plugin</a></p><p><a href="https://webpack.docschina.org/configuration/resolve#resolvealias" target="_blank" rel="noopener noreferrer">resolve.alias</a></p></div><p>完整示例代码如下，你需要先安装 <code>html-webpack-plugin</code> 。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">npm</span> <span class="token function">install</span> html-webpack-plugin <span class="token parameter variable">-S</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;html-webpack-plugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 用于修改模板文件</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">CjpCliDevSectionPlugin</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">option</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;CjpCliDevSectionPlugin init&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// webpack plugin关键方法</span></span>
<span class="line">  <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 1.修改模板文件的路径为壳应用下的public/index.html</span></span>
<span class="line">    <span class="token comment">// 使用html-webpack-plugin</span></span>
<span class="line">    <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&quot;代码片段壳应用插件&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">template</span><span class="token operator">:</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&quot;./public/index.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 运行webpack时推入我们自己的plugin</span></span>
<span class="line">    compiler<span class="token punctuation">.</span>options<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 2.修改模板entry路径（默认指向src/main.js）为壳应用下的src/index.js</span></span>
<span class="line">    compiler<span class="token punctuation">.</span>options<span class="token punctuation">.</span>entry<span class="token punctuation">.</span>app<span class="token punctuation">.</span>import<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&quot;./src/index.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 3.让壳应用中index.js能够找到代码片段中的源码文件</span></span>
<span class="line">    <span class="token comment">// 通过别名@section来拿到当前目录下/src/index.vue</span></span>
<span class="line">    compiler<span class="token punctuation">.</span>options<span class="token punctuation">.</span>resolve<span class="token punctuation">.</span>alias<span class="token punctuation">[</span></span>
<span class="line">      <span class="token string">&quot;@section&quot;</span></span>
<span class="line">    <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/src/index.vue</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> CjpCliDevSectionPlugin<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>process.cwd()</code> 指向当前进程运行所在的路径，它是实现让 <code>壳应用</code> 中 index.js 能够找到代码片段中的 index.vue 的关键。</p></div><p>5、修改 <code>src/index.js</code> 文件，将引入组件代码片段修改为 <code>import App from &#39;@section&#39;</code> 。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 引入组件代码片段</span></span>
<span class="line"><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&#39;@section&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ...省略其他代码</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>6、发布 <code>壳应用</code> 插件，然后你可以在需要使用的项目中进行安装。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>发布npm前，请先访问 <a href="https://www.npmjs.com/" target="_blank" rel="noopener noreferrer">npm官网</a>，确保网络连接正常，然后执行 <code>npm login</code> 进行登录，否则会发布失败。</p><p>发布新的版本前，请先提交代码，并更新版本号。</p></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 进入目录</span></span>
<span class="line"><span class="token builtin class-name">cd</span> cjp-cli-dev-vue3-section-plugin</span>
<span class="line"><span class="token comment"># 发布npm包</span></span>
<span class="line"><span class="token function">npm</span> publish</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以点击这里查看壳应用的代码 <a href="https://gitee.com/Mr_Mikey/cjp-cli-dev-template/tree/master/cjp-cli-dev-vue3-section-plugin" target="_blank" rel="noopener noreferrer">壳应用代码</a> 。</p><h3 id="如何使用壳应用" tabindex="-1"><a class="header-anchor" href="#如何使用壳应用"><span><strong>如何使用壳应用</strong></span></a></h3><p>前面通过vue3来演示创建 <code>壳应用</code> ，这里我们也用vue3来演示如何使用 <code>壳应用</code> 来创建 <code>组件代码片段模板</code> 。</p><p>与 <a href="#%E5%88%9B%E5%BB%BA%E7%BB%84%E4%BB%B6%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5%E6%A8%A1%E6%9D%BF">创建组件代码片段模板</a> 步骤基本一样，这里仅对不同的地方进行说明。</p><p>1、创建代码片段文件夹如 <code>cjp-cli-dev-template-vue3-section-template</code> ，并执行npm初始化，稍后要把这个模板发布到npm上给脚手架命令进行测试使用。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">cd</span> cjp-cli-dev-template-vue3-section-template</span>
<span class="line"><span class="token function">npm</span> init <span class="token parameter variable">-y</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>2、在 <code>cjp-cli-dev-template-vue3-section-template</code> 目录中创建 <code>template</code> 文件夹，与之前一样， <code>template</code> 文件夹中的内容将作为脚手架命令的源码拷贝路径。</p><p>与 <a href="#%E5%88%9B%E5%BB%BA%E7%BB%84%E4%BB%B6%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5%E6%A8%A1%E6%9D%BF">创建组件代码片段模板</a> 不同的是，你需要使用 <code>vue-cli</code> 创建测试项目如 <code>section-template</code> ，选择vue3 webpack标准模板作为示例，然后将 <code>section-template</code> 中的所有文件拷贝到 <code>template</code> 文件夹中。</p><p><strong>完成后直接删除 <code>src</code> 目录下的所有内容，我们不需要这些默认文件和配置，而是通过 <code>壳应用</code> 来启动该项目进行预览。</strong></p><p>假设你现在有一个 <code>Test</code> 组件需要发布为模板，你可以在项目 src 中创建一个 <code>index.vue</code> ，<code>壳应用</code> 插件会寻找这个 <code>index.vue</code> 来运行。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;test&quot;</span><span class="token operator">&gt;</span></span>
<span class="line">    测试</span>
<span class="line">  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">setup</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&#39;测试组件&#39;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">&lt;</span>style scoped<span class="token operator">&gt;</span></span>
<span class="line"><span class="token punctuation">.</span>test <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">color</span><span class="token operator">:</span> red<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时你的目录结构应该长这样：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">cjp-cli-dev-template-vue3-section-template     # 模板包名</span>
<span class="line">├─ template                                    # 模板拷贝目录</span>
<span class="line">│  ├─ src                                      # 项目源码</span>
<span class="line">|  |  ├─ components                            # Test组件依赖的其他组件</span>
<span class="line">|  |  ├─ images                                # Test组件图片</span>
<span class="line">│  |  └─ index.vue                             # Test组件入口文件</span>
<span class="line">│  ├─ package.json                             # 项目package.json</span>
<span class="line">│  ├─ vue.config.js                            # 项目启动配置</span>
<span class="line">│  └─ ...                                      # 项目其他文件</span>
<span class="line">└─ package.json                                # 模板package.json</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、安装 <code>壳应用</code> 插件。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 注意安装路径为：cjp-cli-dev-template-vue3-section-template/template</span></span>
<span class="line"><span class="token comment"># 安装壳应用插件（前面一步创建壳应用我们已经发布过，如果你没发布请先发布）</span></span>
<span class="line"><span class="token function">npm</span> <span class="token function">install</span> cjp-cli-dev-vue3-section-plugin <span class="token parameter variable">-S</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4、使用 <code>壳应用</code> 插件，修改 <code>vue.config.js</code> ，并配置插件。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;@vue/cli-service&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 引入插件</span></span>
<span class="line"><span class="token keyword">const</span> CjpCliDevSectionPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;cjp-cli-dev-vue3-section-plugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">configureWebpack</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 使用插件</span></span>
<span class="line">    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">CjpCliDevSectionPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5、启动项目进行测试</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 注意，启动命令运行目录为：cjp-cli-dev-template-vue3-section-template/template</span></span>
<span class="line"><span class="token function">npm</span> run serve</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,55)),a("p",null,[n[115]||(n[115]=s("如果启动成功没有报错，且组件能够正确打开网页预览，则表示壳应用使用成功了。之后你可以通过这种方式来创建调试和发布新的组件代码片段模板，发布完成后请配置 ")),p(e,{to:"/guide/configuration.html#%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5%E6%A8%A1%E6%9D%BF%E9%85%8D%E7%BD%AE"},{default:t(()=>n[113]||(n[113]=[s("本地JSON")])),_:1}),n[116]||(n[116]=s(" 或者 ")),p(e,{to:"/guide/configuration.html#mongodb%E9%85%8D%E7%BD%AE%E6%A8%A1%E6%9D%BF"},{default:t(()=>n[114]||(n[114]=[s("MongoDB")])),_:1}),n[117]||(n[117]=s(" 后即可执行 ")),n[118]||(n[118]=a("code",null,"add",-1)),n[119]||(n[119]=s(" 命令安装使用。"))]),n[135]||(n[135]=a("p",null,[s("在本例中可以将 "),a("code",null,"targetPath"),s(" 配置为 "),a("code",null,"src/"),s("，执行 "),a("code",null,"add"),s(" 命令时则会将 "),a("code",null,"src"),s(" 目录下的所有文件都当做一个组件整体进行安装。")],-1)),n[136]||(n[136]=a("p",null,[s("你可以点击这里查看如何使用壳应用的演示代码 "),a("a",{href:"https://gitee.com/Mr_Mikey/cjp-cli-dev-template/tree/master/cjp-cli-dev-template-vue3-section-template",target:"_blank",rel:"noopener noreferrer"},"演示代码"),s(" 。")],-1))])}const w=o(d,[["render",y],["__file","template.html.vue"]]),E=JSON.parse('{"path":"/guide/template.html","title":"模板","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"概念解释","slug":"概念解释","link":"#概念解释","children":[]},{"level":2,"title":"如何创建项目模板","slug":"如何创建项目模板","link":"#如何创建项目模板","children":[{"level":3,"title":"创建标准项目模板","slug":"创建标准项目模板","link":"#创建标准项目模板","children":[]},{"level":3,"title":"创建自定义项目模板","slug":"创建自定义项目模板","link":"#创建自定义项目模板","children":[]}]},{"level":2,"title":"如何创建组件库模板","slug":"如何创建组件库模板","link":"#如何创建组件库模板","children":[{"level":3,"title":"开发组件预览页面功能","slug":"开发组件预览页面功能","link":"#开发组件预览页面功能","children":[]},{"level":3,"title":"测试预览页面功能","slug":"测试预览页面功能","link":"#测试预览页面功能","children":[]}]},{"level":2,"title":"如何创建页面模板","slug":"如何创建页面模板","link":"#如何创建页面模板","children":[{"level":3,"title":"创建标准页面模板","slug":"创建标准页面模板","link":"#创建标准页面模板","children":[]},{"level":3,"title":"创建自定义页面模板","slug":"创建自定义页面模板","link":"#创建自定义页面模板","children":[]}]},{"level":2,"title":"如何创建代码片段模板","slug":"如何创建代码片段模板","link":"#如何创建代码片段模板","children":[{"level":3,"title":"创建组件代码片段模板","slug":"创建组件代码片段模板","link":"#创建组件代码片段模板","children":[]}]},{"level":2,"title":"扩展","slug":"扩展","link":"#扩展","children":[{"level":3,"title":"如何创建壳应用","slug":"如何创建壳应用","link":"#如何创建壳应用","children":[]},{"level":3,"title":"如何使用壳应用","slug":"如何使用壳应用","link":"#如何使用壳应用","children":[]}]}],"git":{"updatedTime":1732620882000,"contributors":[{"name":"v_jpch","email":"v_jpch.digitalgd.com","commits":7,"url":"https://github.com/v_jpch"}]},"filePathRelative":"guide/template.md"}');export{w as comp,E as data};
