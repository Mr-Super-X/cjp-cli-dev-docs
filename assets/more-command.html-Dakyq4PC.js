import{_ as d,c as r,b as l,d as s,e as n,f as a,a as i,r as p,o}from"./app-DXiP8jJS.js";const c="/cjp-cli-dev-docs/assets/husky-command-B8y524KQ.gif",h="/cjp-cli-dev-docs/assets/codelint-command-CzGhUXcy.gif",m="/cjp-cli-dev-docs/assets/commitlint-command-CMEk47kx.gif",u="/cjp-cli-dev-docs/assets/release-command-sc5tyLdm.gif",v="/cjp-cli-dev-docs/assets/gitflow-command-D4aCcuad.gif",g="/cjp-cli-dev-docs/assets/resume-command-CtkXq6L0.gif",b="/cjp-cli-dev-docs/assets/server-command-BFZoh0Gt.gif",k="/cjp-cli-dev-docs/assets/delBranch-command-ytl4Q8Df.gif",f={},E={class:"hint-container tip"},B={class:"hint-container tip"},x={class:"hint-container tip"},j={class:"hint-container tip"},y={class:"hint-container tip"},A={class:"hint-container tip"},w={class:"hint-container tip"},D={class:"hint-container tip"};function F(C,e){const t=p("RouteLink");return o(),r("div",null,[e[73]||(e[73]=l("h1",{id:"其它命令",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#其它命令"},[l("span",null,"其它命令")])],-1)),e[74]||(e[74]=l("p",null,[s("其它命令包含安装 "),l("strong",null,"husky工具、统一项目代码规范、统一项目提交信息规范、升级项目版本、创建Git Flow分支模型、启动本地页面预览服务、创建markdown简历"),s(" 等一系列大杂烩功能。")],-1)),e[75]||(e[75]=l("p",null,"未来会增加更多能用命令来解决的我能想到的复杂操作，你有想法或者建议可以邮箱联系我。",-1)),e[76]||(e[76]=l("details",null,[l("summary",null,"点击查看作者联系方式"),l("strong",null,"1303232158@qq.com")],-1)),l("p",null,[e[1]||(e[1]=s("使用前你需要先安装脚手架，如果你还没有安装，请查看 ")),n(t,{to:"/guide/getting-started.html"},{default:a(()=>e[0]||(e[0]=[s("快速上手")])),_:1}),e[2]||(e[2]=s(" 。"))]),e[77]||(e[77]=l("h2",{id:"git-hooks配置工具-husky命令",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#git-hooks配置工具-husky命令"},[l("span",null,"Git Hooks配置工具 - husky命令")])],-1)),e[78]||(e[78]=l("p",null,"支持快速为项目安装可用的Git Hooks配置工具，兼容稳定版和最新版。",-1)),l("div",E,[e[9]||(e[9]=l("p",{class:"hint-container-title"},"提示",-1)),l("p",null,[e[4]||(e[4]=s("如果你还不熟悉脚手架的使用范式，请查看 ")),n(t,{to:"/guide/getting-started.html#%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E8%8C%83%E5%BC%8F"},{default:a(()=>e[3]||(e[3]=[s("快速上手")])),_:1}),e[5]||(e[5]=s(" 说明。"))]),l("p",null,[e[7]||(e[7]=s("如果你想查看当前命令支持什么参数，请查看 ")),n(t,{to:"/guide/getting-started.html#%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E5%B8%AE%E5%8A%A9"},{default:a(()=>e[6]||(e[6]=[s("命令使用帮助")])),_:1}),e[8]||(e[8]=s("。"))])]),e[79]||(e[79]=i(`<h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h3><p>你可以按照以下方式使用</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">cjp-cli-dev husky <span class="token parameter variable">--install</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>husky</code> 命令支持以下参数</p><table><thead><tr><th>参数名</th><th>参数说明</th><th>默认值</th></tr></thead><tbody><tr><td>--install</td><td>为当前项目安装husky功能</td><td>false</td></tr><tr><td>--add</td><td>添加新的Git Hook脚本</td><td>[]</td></tr><tr><td>--set</td><td>设置Git Hook脚本内容</td><td>[]</td></tr></tbody></table><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><p>你现在创建了一个项目 <code>test-project</code> ，想在项目中安装Git Hooks配置工具。执行安装命令，按需选择你想安装稳定版还是最新版即可。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 安装husky</span></span>
<span class="line">cjp-cli-dev husky <span class="token parameter variable">--install</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>你想在提交代码前进行单元测试。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 添加hook（脚本内容需使用引号包裹）</span></span>
<span class="line">cjp-cli-dev husky <span class="token parameter variable">--add</span> pre-commit <span class="token string">&quot;npm run test&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>你又不想要单元测试了，想在提交代码前进行代码检查。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 设置hook（脚本内容需使用引号包裹）</span></span>
<span class="line">cjp-cli-dev husky <span class="token parameter variable">--set</span> pre-commit <span class="token string">&quot;npm run lint&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="动画演示" tabindex="-1"><a class="header-anchor" href="#动画演示"><span>动画演示</span></a></h3><p>做个动画给你看看，只要你闭上眼就很难发现作者只演示了一小部分。</p><p><img src="`+c+'" alt="husky命令演示动画"></p><h3 id="关于" tabindex="-1"><a class="header-anchor" href="#关于"><span>关于</span></a></h3><p>为什么要做这个命令？</p><p>因为懒，手动安装也遇到过各式各样的版本兼容和报错失败问题，安装好了还需要一步一步改配置我嫌麻烦。</p><p>命令做了什么事情？</p><ol><li>检查当前项目是否为node项目</li><li>检查当前目录是否为git仓库，如果是则继续，如果不是则执行git init命令初始化</li><li>检查当前项目是否安装husky</li><li>生成husky版本选项（暂时支持8和最新版本）</li><li>安装对应版本到当前项目，修改package.json scripts，生成默认hook脚本</li><li>安装完成，提示用法和帮助文档</li></ol><p>稳定版和最新版有什么区别？</p><p>稳定版使用 <code>husky 8.x</code> 版本，最新版大于 <code>husky &gt;= 9.0</code> 版本，新版本初始化和设置hook的方式与旧版本不兼容，且新版本要求 <code>node &gt;= 18.x</code>，考虑到很多项目都有一定历史，做了旧版本兼容。</p><h2 id="统一项目代码规范-codelint命令" tabindex="-1"><a class="header-anchor" href="#统一项目代码规范-codelint命令"><span>统一项目代码规范 - codelint命令</span></a></h2><p>支持快速为项目安装统一代码规范和代码格式校验工具，支持仅校验暂存文件，包含eslint、prettier、lint-staged功能，优先使用prettier美化和格式化代码。</p>',24)),l("div",B,[e[16]||(e[16]=l("p",{class:"hint-container-title"},"提示",-1)),l("p",null,[e[11]||(e[11]=s("如果你还不熟悉脚手架的使用范式，请查看 ")),n(t,{to:"/guide/getting-started.html#%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E8%8C%83%E5%BC%8F"},{default:a(()=>e[10]||(e[10]=[s("快速上手")])),_:1}),e[12]||(e[12]=s(" 说明。"))]),l("p",null,[e[14]||(e[14]=s("如果你想查看当前命令支持什么参数，请查看 ")),n(t,{to:"/guide/getting-started.html#%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E5%B8%AE%E5%8A%A9"},{default:a(()=>e[13]||(e[13]=[s("命令使用帮助")])),_:1}),e[15]||(e[15]=s("。"))])]),e[80]||(e[80]=i(`<h3 id="使用-1" tabindex="-1"><a class="header-anchor" href="#使用-1"><span>使用</span></a></h3><p>你可以按照以下方式使用</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">cjp-cli-dev codelint <span class="token parameter variable">--install</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>codelint</code> 命令支持以下参数</p><table><thead><tr><th>参数名</th><th>参数说明</th><th>默认值</th></tr></thead><tbody><tr><td>--install</td><td>为项目安装代码规范校验工具</td><td>false</td></tr></tbody></table><h3 id="示例-1" tabindex="-1"><a class="header-anchor" href="#示例-1"><span>示例</span></a></h3><p>你现在参与了一个项目 <code>test-project</code> ，这个项目有好几个人协作开发，但每个人都有自己乱七八糟的写法，导致混乱难以管理且改别人的代码非常恶心。于是你想了个办法统一项目代码风格。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 安装codelint</span></span>
<span class="line">cjp-cli-dev codelint <span class="token parameter variable">--install</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="动画演示-1" tabindex="-1"><a class="header-anchor" href="#动画演示-1"><span>动画演示</span></a></h3><p>做个动画给你看看，只要你闭上眼就很难发现作者只演示了一小部分。</p><p><img src="`+h+'" alt="codelint命令演示动画"></p><h3 id="关于-1" tabindex="-1"><a class="header-anchor" href="#关于-1"><span>关于</span></a></h3><p>为什么要做这个命令？</p><p>因为懒。</p><p>命令做了什么事情？</p><ol><li>检查当前项目是否为node项目</li><li>检查当前项目是否安装eslint/prettier</li><li>安装eslint、prettier、lint-staged，生成默认配置</li><li>检查用户是否安装husky，如果有则调用cjp-cli-dev husky --add pre-commit &quot;npx lint-staged&quot;添加校验</li><li>安装完成，提示用法和帮助文档</li></ol><h2 id="统一项目提交规范-commitlint命令" tabindex="-1"><a class="header-anchor" href="#统一项目提交规范-commitlint命令"><span>统一项目提交规范 - commitlint命令</span></a></h2><p>支持快速为项目安装统一提交信息规范校验工具，使用Angular提交规范，配套汉化版终端交互工具，终端调用命令选择规范提交类型和输入提交信息。</p>',18)),l("div",x,[e[23]||(e[23]=l("p",{class:"hint-container-title"},"提示",-1)),l("p",null,[e[18]||(e[18]=s("如果你还不熟悉脚手架的使用范式，请查看 ")),n(t,{to:"/guide/getting-started.html#%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E8%8C%83%E5%BC%8F"},{default:a(()=>e[17]||(e[17]=[s("快速上手")])),_:1}),e[19]||(e[19]=s(" 说明。"))]),l("p",null,[e[21]||(e[21]=s("如果你想查看当前命令支持什么参数，请查看 ")),n(t,{to:"/guide/getting-started.html#%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E5%B8%AE%E5%8A%A9"},{default:a(()=>e[20]||(e[20]=[s("命令使用帮助")])),_:1}),e[22]||(e[22]=s("。"))])]),e[81]||(e[81]=i(`<h3 id="使用-2" tabindex="-1"><a class="header-anchor" href="#使用-2"><span>使用</span></a></h3><p>你可以按照以下方式使用</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">cjp-cli-dev commitlint <span class="token parameter variable">--install</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>commitlint</code> 命令支持以下参数</p><table><thead><tr><th>参数名</th><th>参数说明</th><th>默认值</th></tr></thead><tbody><tr><td>--install</td><td>为项目安装Git提交信息Angular规范校验工具</td><td>false</td></tr></tbody></table><h3 id="示例-2" tabindex="-1"><a class="header-anchor" href="#示例-2"><span>示例</span></a></h3><p>你现在参与了一个项目 <code>test-project</code> ，这个项目多人协作开发，但每个人提交的信息乱七八糟毫无章法，某天老板让你统计下这个版本的代码提交哪些是新增功能、哪些是修Bug、哪些是优化。你有点蛋疼，求助了大佬，大佬也没什么好办法，但他告诉你从现在开始规范提交未来能让你舒坦点。你在网上搜索各种教程，总算知道要在git提交代码时对提交信息进行校验，于是你说服团队成员，并承诺可以让他们更轻松的使用你的规范，而不会额外增加工作量。但你发现要实现这个功能非常麻烦，过程中各种复杂配置导致你出现了无法解决的报错，直到你看到作者的脚手架 <code>commitlint</code> 命令满足你的要求，你的嘴角总算压不住了。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 安装commitlint</span></span>
<span class="line">cjp-cli-dev commitlint <span class="token parameter variable">--install</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="动画演示-2" tabindex="-1"><a class="header-anchor" href="#动画演示-2"><span>动画演示</span></a></h3><p>做个动画给你看看，只要你闭上眼就很难发现作者只演示了一小部分。</p><p><img src="`+m+'" alt="commitlint命令演示动画"></p><h3 id="关于-2" tabindex="-1"><a class="header-anchor" href="#关于-2"><span>关于</span></a></h3><p>为什么要做这个命令？</p><p>因为懒。</p><p>命令做了什么事情？</p><ol><li>检查当前项目是否为node项目</li><li>检查当前项目中是否安装commitlint</li><li>检查node版本，获取对应版本可用package信息</li><li>安装commitlint相关包，生成相关配置</li><li>安装完成，提示用法和帮助文档</li></ol><h2 id="升级项目版本-release命令" tabindex="-1"><a class="header-anchor" href="#升级项目版本-release命令"><span>升级项目版本 - release命令</span></a></h2><p>支持快速自动升级项目版本，自动生成git变更记录文档。</p>',18)),l("div",j,[e[30]||(e[30]=l("p",{class:"hint-container-title"},"提示",-1)),l("p",null,[e[25]||(e[25]=s("如果你还不熟悉脚手架的使用范式，请查看 ")),n(t,{to:"/guide/getting-started.html#%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E8%8C%83%E5%BC%8F"},{default:a(()=>e[24]||(e[24]=[s("快速上手")])),_:1}),e[26]||(e[26]=s(" 说明。"))]),l("p",null,[e[28]||(e[28]=s("如果你想查看当前命令支持什么参数，请查看 ")),n(t,{to:"/guide/getting-started.html#%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E5%B8%AE%E5%8A%A9"},{default:a(()=>e[27]||(e[27]=[s("命令使用帮助")])),_:1}),e[29]||(e[29]=s("。"))])]),e[82]||(e[82]=i(`<h3 id="使用-3" tabindex="-1"><a class="header-anchor" href="#使用-3"><span>使用</span></a></h3><p>你可以按照以下方式使用</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">cjp-cli-dev release <span class="token parameter variable">--install</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>release</code> 命令支持以下参数</p><table><thead><tr><th>参数名</th><th>参数说明</th><th>默认值</th></tr></thead><tbody><tr><td>--install</td><td>为当前项目安装release-it功能</td><td>false</td></tr><tr><td>--patch</td><td>自动升级patch版本，示例：1.0.0 =&gt; 1.0.1</td><td>false</td></tr><tr><td>--minor</td><td>自动升级minor版本，示例：1.0.0 =&gt; 1.1.0</td><td>false</td></tr><tr><td>--major</td><td>自动升级major版本，示例：1.0.0 =&gt; 2.0.0</td><td>false</td></tr></tbody></table><h3 id="示例-3" tabindex="-1"><a class="header-anchor" href="#示例-3"><span>示例</span></a></h3><p>你现在参与了一个项目 <code>test-project</code> ，这个项目运行了好几年一直没有规范的版本管理，你接手以后想让他规范起来，经过你的努力，版本管理终于规范起来，你们成功发布了 <code>1.0.0</code> 版本。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 安装release</span></span>
<span class="line">cjp-cli-dev release <span class="token parameter variable">--install</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>老板很赞赏你，拍了拍你的肩膀，告诉你继续加油争取这周再发一个小版本，于是你们持续996，终于可以发布 <code>1.1.0</code> 版本，但还要你手动去修改 <code>package.json</code> 的 <code>version</code>，这怎么忍？你气的不小心按到了脚手架命令，才发现原来它会自动帮你修改版本，还会帮你创建这个版本的提交记录文档。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 升级minor版本</span></span>
<span class="line">cjp-cli-dev release <span class="token parameter variable">--minor</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>1.1.0</code> 版本发布上线了，你不放心的上线看了看，果然被你发现有个小Bug，你趁着页面还没反应过来赶紧跟上了一个 <code>1.1.1</code> 修复版本，然后反手点了一根蚊香，深藏功与名。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 升级patch版本</span></span>
<span class="line">cjp-cli-dev release <span class="token parameter variable">--patch</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>项目在你们持续几年不懈的努力和付出下业务快速扩张，老板刚进公司开的雅阁也换成了大奔，刚才你路过停车场看见老板从大劳上下来，老板也看见了你，并向你走了过来，不停地对你发起赞赏，还给你颁发了优秀员工称号，同时给你带来项目要大升级打算发布 <code>2.0.0</code> 版的好消息，嘱咐你好好干公司一定不会亏待你。而你依旧持续着996的生活，工资一毛没涨，看着身边的同事辞去迎新，你拿着手里那三年来从未变过的工资条，不禁有些恍惚，感叹 “铁打的营盘，流水的兵” ，手里的键盘忍了又忍还是按了下去，但紧接着键盘上传来的很细微的回声却让你感觉到振聋发聩，它仿佛老板的狗腿子对你吐了一口唾沫 “呸！你就是个外包低级杂工”，眼泪最终还是不争气的从嘴角流了下来，你大口啃咬着左手上拿着的已经凉透了的肯德基外卖，心想 “管他呢，这年头有口饭吃就不错了”。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 升级major版本</span></span>
<span class="line">cjp-cli-dev release <span class="token parameter variable">--major</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="动画演示-3" tabindex="-1"><a class="header-anchor" href="#动画演示-3"><span>动画演示</span></a></h3><p>做个动画给你看看，只要你闭上眼就很难发现作者只演示了一小部分。</p><p><img src="`+u+'" alt="release命令演示动画"></p><h3 id="关于-3" tabindex="-1"><a class="header-anchor" href="#关于-3"><span>关于</span></a></h3><p>为什么要做这个命令？</p><p>因为懒。</p><p>命令做了什么事情？</p><ol><li>检查当前项目是否node项目</li><li>检查是否安装release-it</li><li>检查node版本，生成可用的release-it相关包版本</li><li>安装release-it相关包到当前项目</li><li>生成.release-it.json配置</li><li>修改package.json添加scripts</li><li>安装完成，提示用法和帮助文档</li></ol><h2 id="创建git-flow分支模型-gitflow命令" tabindex="-1"><a class="header-anchor" href="#创建git-flow分支模型-gitflow命令"><span>创建Git Flow分支模型 - gitflow命令</span></a></h2><p>支持快速为项目创建Git Flow分支模型，自动检查系统是否安装对应工具并返回帮助文档。</p>',24)),l("div",y,[e[37]||(e[37]=l("p",{class:"hint-container-title"},"提示",-1)),l("p",null,[e[32]||(e[32]=s("如果你还不熟悉脚手架的使用范式，请查看 ")),n(t,{to:"/guide/getting-started.html#%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E8%8C%83%E5%BC%8F"},{default:a(()=>e[31]||(e[31]=[s("快速上手")])),_:1}),e[33]||(e[33]=s(" 说明。"))]),l("p",null,[e[35]||(e[35]=s("如果你想查看当前命令支持什么参数，请查看 ")),n(t,{to:"/guide/getting-started.html#%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E5%B8%AE%E5%8A%A9"},{default:a(()=>e[34]||(e[34]=[s("命令使用帮助")])),_:1}),e[36]||(e[36]=s("。"))])]),e[83]||(e[83]=i(`<h3 id="使用-4" tabindex="-1"><a class="header-anchor" href="#使用-4"><span>使用</span></a></h3><p>你可以按照以下方式使用</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">cjp-cli-dev gitflow <span class="token parameter variable">--install</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>gitflow</code> 命令支持以下参数</p><table><thead><tr><th>参数名</th><th>参数说明</th><th>默认值</th></tr></thead><tbody><tr><td>--install</td><td>为当前项目初始化Git Flow分支模型</td><td>false</td></tr><tr><td>--force</td><td>是否强制初始化分支模型</td><td>false</td></tr></tbody></table><h3 id="示例-4" tabindex="-1"><a class="header-anchor" href="#示例-4"><span>示例</span></a></h3><p>你现在参与了一个项目 <code>test-project</code> ，这个项目有好几个人协作开发，由于你们没有规范的分支管理，导致各种冲突和管理困难，偶然逛社区的时候你看到 Git Flow 分支管理，你觉得非常满足当下需要，刚好脚手架命令支持你的需求。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 安装gitflow</span></span>
<span class="line">cjp-cli-dev gitflow <span class="token parameter variable">--install</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>你发现刚才初始化 Git Flow 时分支名填错了，你想重新设置。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 强制安装gitflow</span></span>
<span class="line">cjp-cli-dev gitflow <span class="token parameter variable">--install</span> <span class="token parameter variable">--force</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="动画演示-4" tabindex="-1"><a class="header-anchor" href="#动画演示-4"><span>动画演示</span></a></h3><p>做个动画给你看看，只要你闭上眼就很难发现作者只演示了一小部分。</p><p><img src="`+v+'" alt="gitflow命令演示动画"></p><h3 id="关于-4" tabindex="-1"><a class="header-anchor" href="#关于-4"><span>关于</span></a></h3><p>灵感来源于 <a href="https://github.com/nvie/gitflow" target="_blank" rel="noopener noreferrer">git-flow</a> 。</p><p>为什么要做这个命令？</p><p>因为懒。</p><p>命令做了什么事情？</p><ol><li>检查用户是否已安装git-flow（windows安装git自带，macOS返回安装链接），提示并等待用户安装完成按回车继续</li><li>检查当前目录是否为git仓库，如果是则继续，如果不是则执行git init命令初始化</li><li>判断force不存在，检查是否已经初始化过git flow，如果是则终止执行，否则继续</li><li>用户选择使用默认git flow分支模型还是自定义分支模型</li><li>选择默认，执行git flow init -d初始化默认分支模型 <code>master/develop/release/feature/hotfix/bugfix/support...</code></li><li>选择自定义，执行git flow init让用户输入自定义分支模型</li><li>完成git flow分支模型初始化，返回帮助文档</li></ol><h2 id="创建markdown简历-resume命令" tabindex="-1"><a class="header-anchor" href="#创建markdown简历-resume命令"><span>创建markdown简历 - resume命令</span></a></h2><p>支持创建markdown简历，提供前端简历模板，支持导出one-light主题样式PDF。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>灵感来源于 <code>Markdown Preview Enhanced</code> ，在 <code>vscode</code> 中预览 <code>markdown</code> 和导出功能非常好用，自己研究了下，也实现了一个。</p></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>导出PDF能力依赖chrome浏览器，首次使用该命令的 <code>--export</code> 功能时需提供chrome浏览器安装路径，如果chrome安装路径被修改，则需使用 <code>--resetChromePath</code> 参数重置安装路径。</p><p>注意：由于依赖包 <code>puppeteer-core</code> 使用了 <code>node</code> 一些新特性，要求 <code>node &gt;= 18.x</code> ，否则会报错。</p></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>目前仅支持一张简历照片正常显示在导出的 <code>PDf</code> 文件中，简历中也仅需要一张证件照即可，不需要其它花里胡哨的图片。导出规则为在下载好的 <code>markdown</code> 简历模板中提供一个 <code>img</code> 标签，<code>id</code> 为 <code>photo</code> ，并且 <code>src</code> 属性能正确引用到图片路径，默认情况下模板中已经提供正确的示例，如果你在下载模板编辑后想更换另一张证件照，你可以直接修改证件照路径，如：<code>&lt;img id=&quot;photo&quot; src=&quot;./newPhoto.jpg&quot;&gt;</code> 。</p></div>',24)),l("div",A,[e[44]||(e[44]=l("p",{class:"hint-container-title"},"提示",-1)),l("p",null,[e[39]||(e[39]=s("如果你还不熟悉脚手架的使用范式，请查看 ")),n(t,{to:"/guide/getting-started.html#%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E8%8C%83%E5%BC%8F"},{default:a(()=>e[38]||(e[38]=[s("快速上手")])),_:1}),e[40]||(e[40]=s(" 说明。"))]),l("p",null,[e[42]||(e[42]=s("如果你想查看当前命令支持什么参数，请查看 ")),n(t,{to:"/guide/getting-started.html#%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E5%B8%AE%E5%8A%A9"},{default:a(()=>e[41]||(e[41]=[s("命令使用帮助")])),_:1}),e[43]||(e[43]=s("。"))])]),e[84]||(e[84]=i(`<h3 id="使用-5" tabindex="-1"><a class="header-anchor" href="#使用-5"><span>使用</span></a></h3><p>你可以按照以下方式使用</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">cjp-cli-dev resume <span class="token parameter variable">--install</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>resume</code> 命令支持以下参数</p><table><thead><tr><th>参数名</th><th>参数说明</th><th>默认值</th></tr></thead><tbody><tr><td>--install</td><td>下载markdown简历模板</td><td>false</td></tr><tr><td>--export</td><td>将markdown简历转为PDF</td><td>false</td></tr><tr><td>--resetChromePath</td><td>重置chrome浏览器安装路径缓存</td><td>false</td></tr></tbody></table><h3 id="示例-5" tabindex="-1"><a class="header-anchor" href="#示例-5"><span>示例</span></a></h3><p>今天老板突然通知你被炒鱿鱼了，你心里烦得很，看着为数不多的钱包余额，准备再找新的工作。你把以前投过的docx简历改了又改总算满意，在心仪的公司投递后却被打回，留言是本司简历仅接收PDF格式。于是你开始在网上找免费的docx转pdf方法，结果都是乱七八糟，一气之下你付费了某迅，发现还是差强人意，作者得知你的惨痛经历后连夜在脚手架中开发了 <code>resume</code> 命令，安慰你专业开发都用 <code>markdown</code> 写简历，还吹牛逼说这绝对是你用过的最好的 <code>.md</code> 转 <code>.pdf</code> 工具，关键还免费！你在职场失意的心情下被忽悠住了，觉得很有歪理，心里暗暗笃定也要做专业人士。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 下载markdown简历模板</span></span>
<span class="line">cjp-cli-dev resume <span class="token parameter variable">--install</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>经过你小半天的偷懒，总算把原来的简历内容cv到markdown简历中了，于是你想试试作者有没有吹牛逼，是不是真的既免费又能导出格式好看的PDF。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 导出.md简历为.pdf简历</span></span>
<span class="line">cjp-cli-dev resume <span class="token parameter variable">--export</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,10)),l("p",null,[e[46]||(e[46]=s("有了这个神器，你顺利找到了新的工作，在新公司工作几天后突然你的chrome浏览器出现错误打不开了，于是你重装了chrome浏览器，这次安装时你选择了新的安装路径，你想再次尝试命令导出PDF时却发现报错了，你骂骂咧咧的吐出几句国粹，把作者屌了一顿，并使用")),n(t,{to:"/sponsor/#%E9%92%9E%E8%83%BD%E5%8A%9B"},{default:a(()=>e[45]||(e[45]=[s("钞能力")])),_:1}),e[47]||(e[47]=s("强迫他提供重置chrome浏览器安装路径的能力。"))]),e[85]||(e[85]=i(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 重置chrome浏览器安装路径缓存</span></span>
<span class="line">cjp-cli-dev resume <span class="token parameter variable">--resetChromePath</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="动画演示-5" tabindex="-1"><a class="header-anchor" href="#动画演示-5"><span>动画演示</span></a></h3>`,2)),l("p",null,[e[49]||(e[49]=s("做个动画给你看看，鉴于你的")),n(t,{to:"/sponsor/#%E9%92%9E%E8%83%BD%E5%8A%9B"},{default:a(()=>e[48]||(e[48]=[s("钞能力")])),_:1}),e[50]||(e[50]=s("作者多演示了导出功能。"))]),e[86]||(e[86]=i('<p><img src="'+g+'" alt="resume命令演示动画"></p><h3 id="关于-5" tabindex="-1"><a class="header-anchor" href="#关于-5"><span>关于</span></a></h3><p>为什么要做这个命令？</p><p>找免费转换工具找累了。</p><p>命令做了什么事情？</p><ul><li>--install</li></ul><ol><li>输入姓名、手机号、邮箱、职位、年龄、工龄、求职地点等基础信息</li><li>询问是否需要证件照，提示将证件照拷贝到当前目录，支持jpg/png</li><li>列出当前目录中的图片文件供用户选择</li><li>将选择的证件照转为base64插入到img src</li><li>生成markdown简历模板到当前目录，并通过ejs渲染</li><li>提示用户可通过脚手架命令导出pdf</li><li>返回markdown基础语法帮助文档</li></ol><ul><li>--export</li></ul><ol><li>获取当前目录中的md文件并列出选项</li><li>首次使用导出提示用户依赖chrome浏览器，需提供chrome安装路径</li><li>将用户输入的chrome安装路径写入脚手架缓存</li><li>读取用户选择导出的md文件，通过marked转为html格式</li><li>驱动chrome浏览器导出html为PDF</li></ol><h2 id="本地页面预览-server命令" tabindex="-1"><a class="header-anchor" href="#本地页面预览-server命令"><span>本地页面预览 - server命令</span></a></h2><p>通过express启动本地页面预览服务，支持http请求代理，支持代理多个服务器。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>灵感来源于 <code>webpack-dev-server</code> ，源码也是通过 <code>express + http-proxy-middleware</code> 实现。</p></div>',12)),l("div",w,[e[57]||(e[57]=l("p",{class:"hint-container-title"},"提示",-1)),l("p",null,[e[52]||(e[52]=s("如果你还不熟悉脚手架的使用范式，请查看 ")),n(t,{to:"/guide/getting-started.html#%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E8%8C%83%E5%BC%8F"},{default:a(()=>e[51]||(e[51]=[s("快速上手")])),_:1}),e[53]||(e[53]=s(" 说明。"))]),l("p",null,[e[55]||(e[55]=s("如果你想查看当前命令支持什么参数，请查看 ")),n(t,{to:"/guide/getting-started.html#%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E5%B8%AE%E5%8A%A9"},{default:a(()=>e[54]||(e[54]=[s("命令使用帮助")])),_:1}),e[56]||(e[56]=s("。"))])]),e[87]||(e[87]=i(`<h3 id="使用-6" tabindex="-1"><a class="header-anchor" href="#使用-6"><span>使用</span></a></h3><p>你可以按照以下方式使用</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">cjp-cli-dev server</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>server</code> 命令支持以下参数</p><table><thead><tr><th>参数名</th><th>参数说明</th><th>默认值</th></tr></thead><tbody><tr><td>--port</td><td>指定启动服务的端口</td><td>3000</td></tr></tbody></table><h3 id="示例-6" tabindex="-1"><a class="header-anchor" href="#示例-6"><span>示例</span></a></h3><p>你现在参与了一个项目 <code>test-project</code> ，出现了本地开发环境和生产环境某些效果不一致情况，你想在本地打包检查效果，由于接口请求不通导致页面大量空白，你在网上虽然找到了很多静态页面预览工具，但都没有支持代理服务器的功能，于是你试了下作者的脚手架命令，没想到还真行。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 进入构建目录</span></span>
<span class="line"><span class="token builtin class-name">cd</span> dist/</span>
<span class="line"><span class="token comment"># 启动页面预览服务</span></span>
<span class="line">cjp-cli-dev server</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8)),l("p",null,[e[59]||(e[59]=s("你体验完觉得很满意，在你接连赞叹了三个“好！好！好！”之后又启动了一个新的预览服务，这次却报错了，于是你又使用")),n(t,{to:"/sponsor/#%E9%92%9E%E8%83%BD%E5%8A%9B"},{default:a(()=>e[58]||(e[58]=[s("钞能力")])),_:1}),e[60]||(e[60]=s("强迫作者增加了指定端口能力。"))]),e[88]||(e[88]=i(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 指定 3001 端口启动页面预览服务</span></span>
<span class="line">cjp-cli-dev server <span class="token parameter variable">--port</span> <span class="token number">3001</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="动画演示-6" tabindex="-1"><a class="header-anchor" href="#动画演示-6"><span>动画演示</span></a></h3><p>做个动画给你看看，这次基本演示全了。</p><p><img src="`+b+'" alt="server命令演示动画"></p><h3 id="关于-6" tabindex="-1"><a class="header-anchor" href="#关于-6"><span>关于</span></a></h3><p>为什么要做这个命令？</p><p>因为别的工具预览服务都不那么好用。</p><p>命令做了什么事情？</p><ol><li>检查index.html是否存在</li><li>用户输入publicPath</li><li>询问是否有代理需求，是则进入4，否则直接到8</li><li>询问代理多服务器还是单服务器</li><li>多，填写多服务代理配置</li><li>单，填写单服务器代理地址和重写规则</li><li>生成代理中间件，启动proxy中间件代理</li><li>启动express预览服务</li></ol><h2 id="删除分支-delete-branch命令" tabindex="-1"><a class="header-anchor" href="#删除分支-delete-branch命令"><span>删除分支 - delete-branch命令</span></a></h2><p>支持快速删除本地和远端分支，可多选删除。</p>',11)),l("div",D,[e[67]||(e[67]=l("p",{class:"hint-container-title"},"提示",-1)),l("p",null,[e[62]||(e[62]=s("如果你还不熟悉脚手架的使用范式，请查看 ")),n(t,{to:"/guide/getting-started.html#%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E8%8C%83%E5%BC%8F"},{default:a(()=>e[61]||(e[61]=[s("快速上手")])),_:1}),e[63]||(e[63]=s(" 说明。"))]),l("p",null,[e[65]||(e[65]=s("如果你想查看当前命令支持什么参数，请查看 ")),n(t,{to:"/guide/getting-started.html#%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E5%B8%AE%E5%8A%A9"},{default:a(()=>e[64]||(e[64]=[s("命令使用帮助")])),_:1}),e[66]||(e[66]=s("。"))])]),e[89]||(e[89]=i(`<h3 id="使用-7" tabindex="-1"><a class="header-anchor" href="#使用-7"><span>使用</span></a></h3><p>你可以按照以下方式使用</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">cjp-cli-dev delete-branch <span class="token punctuation">[</span>branchName<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>server</code> 命令支持以下参数</p><table><thead><tr><th>参数名</th><th>参数说明</th><th>默认值</th></tr></thead><tbody><tr><td>--multiple</td><td>是否多选分支删除</td><td>false</td></tr><tr><td>--force</td><td>是否强制删除分支</td><td>false</td></tr></tbody></table><h3 id="示例-7" tabindex="-1"><a class="header-anchor" href="#示例-7"><span>示例</span></a></h3>`,6)),l("p",null,[e[69]||(e[69]=s("由于你领导不给力，你们组接手了一个项目 ")),e[70]||(e[70]=l("code",null,"test-project",-1)),e[71]||(e[71]=s(" ，这口黑锅成功弄走了好几代开发，里面都是各种乱七八糟的分支和代码，老板让你优化一下，把里面没用的分支都删了，你看着分支列表滚动条从上滚到下滚了一分钟，心想这tm得删到什么时候，但还好，你的")),n(t,{to:"/sponsor/#%E9%92%9E%E8%83%BD%E5%8A%9B"},{default:a(()=>e[68]||(e[68]=[s("钞能力")])),_:1}),e[72]||(e[72]=s("还在。"))]),e[90]||(e[90]=i(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 删除选中的多个分支</span></span>
<span class="line">cjp-cli-dev delete-branch <span class="token parameter variable">--multiple</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>经过你一顿操作以后，发现还有漏网之鱼。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 同时删除本地和远程test-branch分支，如果有</span></span>
<span class="line">cjp-cli-dev delete-branch test-branch</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="动画演示-7" tabindex="-1"><a class="header-anchor" href="#动画演示-7"><span>动画演示</span></a></h3><p>做个动画给你看看，这次基本演示全了。</p><p><img src="`+k+'" alt="delete-branch命令演示动画"></p><h3 id="关于-7" tabindex="-1"><a class="header-anchor" href="#关于-7"><span>关于</span></a></h3><p>为什么要做这个命令？</p><p>因为真遇到过这种垃圾项目，手动删起来贼慢。</p><p>命令做了什么事情？</p><ol><li>支持参数，branchName、force、multiple</li><li>multiple参数为true，列出所有本地和远端分支供用户选择</li><li>multiple为false，单删模式，输入命令 + branchName即可</li><li>检查force参数，单删和多删都生效，为true则不进行二次确认直接删除，false则进行二次确认</li><li>检查本地和远端要删除的分支是否存在，存在则删除，不存在则跳过</li><li>完成删除功能，提示成功</li></ol>',11))])}const P=d(f,[["render",F],["__file","more-command.html.vue"]]),q=JSON.parse('{"path":"/guide/more-command.html","title":"其它命令","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"Git Hooks配置工具 - husky命令","slug":"git-hooks配置工具-husky命令","link":"#git-hooks配置工具-husky命令","children":[{"level":3,"title":"使用","slug":"使用","link":"#使用","children":[]},{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":3,"title":"动画演示","slug":"动画演示","link":"#动画演示","children":[]},{"level":3,"title":"关于","slug":"关于","link":"#关于","children":[]}]},{"level":2,"title":"统一项目代码规范 - codelint命令","slug":"统一项目代码规范-codelint命令","link":"#统一项目代码规范-codelint命令","children":[{"level":3,"title":"使用","slug":"使用-1","link":"#使用-1","children":[]},{"level":3,"title":"示例","slug":"示例-1","link":"#示例-1","children":[]},{"level":3,"title":"动画演示","slug":"动画演示-1","link":"#动画演示-1","children":[]},{"level":3,"title":"关于","slug":"关于-1","link":"#关于-1","children":[]}]},{"level":2,"title":"统一项目提交规范 - commitlint命令","slug":"统一项目提交规范-commitlint命令","link":"#统一项目提交规范-commitlint命令","children":[{"level":3,"title":"使用","slug":"使用-2","link":"#使用-2","children":[]},{"level":3,"title":"示例","slug":"示例-2","link":"#示例-2","children":[]},{"level":3,"title":"动画演示","slug":"动画演示-2","link":"#动画演示-2","children":[]},{"level":3,"title":"关于","slug":"关于-2","link":"#关于-2","children":[]}]},{"level":2,"title":"升级项目版本 - release命令","slug":"升级项目版本-release命令","link":"#升级项目版本-release命令","children":[{"level":3,"title":"使用","slug":"使用-3","link":"#使用-3","children":[]},{"level":3,"title":"示例","slug":"示例-3","link":"#示例-3","children":[]},{"level":3,"title":"动画演示","slug":"动画演示-3","link":"#动画演示-3","children":[]},{"level":3,"title":"关于","slug":"关于-3","link":"#关于-3","children":[]}]},{"level":2,"title":"创建Git Flow分支模型 - gitflow命令","slug":"创建git-flow分支模型-gitflow命令","link":"#创建git-flow分支模型-gitflow命令","children":[{"level":3,"title":"使用","slug":"使用-4","link":"#使用-4","children":[]},{"level":3,"title":"示例","slug":"示例-4","link":"#示例-4","children":[]},{"level":3,"title":"动画演示","slug":"动画演示-4","link":"#动画演示-4","children":[]},{"level":3,"title":"关于","slug":"关于-4","link":"#关于-4","children":[]}]},{"level":2,"title":"创建markdown简历 - resume命令","slug":"创建markdown简历-resume命令","link":"#创建markdown简历-resume命令","children":[{"level":3,"title":"使用","slug":"使用-5","link":"#使用-5","children":[]},{"level":3,"title":"示例","slug":"示例-5","link":"#示例-5","children":[]},{"level":3,"title":"动画演示","slug":"动画演示-5","link":"#动画演示-5","children":[]},{"level":3,"title":"关于","slug":"关于-5","link":"#关于-5","children":[]}]},{"level":2,"title":"本地页面预览 - server命令","slug":"本地页面预览-server命令","link":"#本地页面预览-server命令","children":[{"level":3,"title":"使用","slug":"使用-6","link":"#使用-6","children":[]},{"level":3,"title":"示例","slug":"示例-6","link":"#示例-6","children":[]},{"level":3,"title":"动画演示","slug":"动画演示-6","link":"#动画演示-6","children":[]},{"level":3,"title":"关于","slug":"关于-6","link":"#关于-6","children":[]}]},{"level":2,"title":"删除分支 - delete-branch命令","slug":"删除分支-delete-branch命令","link":"#删除分支-delete-branch命令","children":[{"level":3,"title":"使用","slug":"使用-7","link":"#使用-7","children":[]},{"level":3,"title":"示例","slug":"示例-7","link":"#示例-7","children":[]},{"level":3,"title":"动画演示","slug":"动画演示-7","link":"#动画演示-7","children":[]},{"level":3,"title":"关于","slug":"关于-7","link":"#关于-7","children":[]}]}],"git":{"updatedTime":1732791318000,"contributors":[{"name":"v_jpch","email":"v_jpch.digitalgd.com","commits":10,"url":"https://github.com/v_jpch"}]},"filePathRelative":"guide/more-command.md"}');export{P as comp,q as data};
